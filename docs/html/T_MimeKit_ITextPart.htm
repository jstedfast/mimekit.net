<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>ITextPart Interface</title><meta name="Title" content="ITextPart Interface" /><meta name="Microsoft.Help.Id" content="T:MimeKit.ITextPart" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="MimeKit.ITextPart interface" /><meta name="System.Keywords" content="ITextPart interface" /><meta name="Microsoft.Help.F1" content="MimeKit.ITextPart" /><meta name="Microsoft.Help.F1" content="ITextPart" /><meta name="container" content="MimeKit" /><meta name="file" content="T_MimeKit_ITextPart" /><meta name="guid" content="T_MimeKit_ITextPart" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Description" content="An interface for a textual MIME part." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_MimeKit.htm" title="MimeKit" tocid="N_MimeKit">MimeKit</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_MimeKit_ITextPart.htm" title="ITextPart Interface" tocid="T_MimeKit_ITextPart">ITextPart Interface</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_MimeKit_ITextPart.htm" title="ITextPart Properties" tocid="Properties_T_MimeKit_ITextPart">ITextPart Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_MimeKit_ITextPart.htm" title="ITextPart Methods" tocid="Methods_T_MimeKit_ITextPart">ITextPart Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>IText<wbr />Part Interface</h1></td></tr></table><div class="summary">
            An interface for a textual MIME part.
            </div><br /><strong>Namespace:</strong> <a href="N_MimeKit.htm">MimeKit</a><br /><strong>Assembly:</strong> MimeKit (in MimeKit.dll) Version: 4.12.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="identifier">ITextPart</span> : <span class="identifier">IMimePart</span>, 
	<span class="identifier">IMimeEntity</span>, <span class="identifier">IDisposable</span></pre></div></div></div></div><p>The <span class="selflink">ITextPart</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDLFA')" onkeypress="SectionExpandCollapse_CheckKey('IDLFA', event)" tabindex="0"><img id="IDLFAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="IDLFASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_IMimePart_Content.htm">Content</a></td><td>
            Get or set the MIME content.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimeEntity_ContentBase.htm">ContentBase</a></td><td>
            Get or set the base content URI.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimePart_ContentDescription.htm">ContentDescription</a></td><td>
            Get or set the description of the content if available.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimeEntity_ContentDisposition.htm">ContentDisposition</a></td><td>
            Get or set the content disposition.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimePart_ContentDuration.htm">ContentDuration</a></td><td>
            Get or set the duration of the content if available.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimeEntity_ContentId.htm">ContentId</a></td><td>
            Get or set the Content-Id.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimeEntity_ContentLocation.htm">ContentLocation</a></td><td>
            Get or set the content location.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimePart_ContentMd5.htm">ContentMd5</a></td><td>
            Get or set the md5sum of the content.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimePart_ContentTransferEncoding.htm">ContentTransferEncoding</a></td><td>
            Get or set the content transfer encoding.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimeEntity_ContentType.htm">ContentType</a></td><td>
            Get the type of the content.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_IMimePart_FileName.htm">FileName</a></td><td>
            Get or set the name of the file.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_ITextPart_Format.htm">Format</a></td><td>
            Get the text format of the content.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimeEntity_Headers.htm">Headers</a></td><td>
            Get the list of headers.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_IMimeEntity_IsAttachment.htm">IsAttachment</a></td><td>
            Get a value indicating whether this entity is an attachment.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_ITextPart_IsEnriched.htm">IsEnriched</a></td><td>
            Get whether this text part contains enriched text.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_ITextPart_IsFlowed.htm">IsFlowed</a></td><td>
            Get whether this text part contains flowed text.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_ITextPart_IsHtml.htm">IsHtml</a></td><td>
            Get whether this text part contains HTML.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_ITextPart_IsPlain.htm">IsPlain</a></td><td>
            Get whether this text part contains plain text.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_ITextPart_IsRichText.htm">IsRichText</a></td><td>
            Get whether this text part contains RTF.
            </td></tr><tr><td><img src="../icons/pubProperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_ITextPart_Text.htm">Text</a></td><td>
            Get the decoded text content.
            </td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAFA')" onkeypress="SectionExpandCollapse_CheckKey('IDAFA', event)" tabindex="0"><img id="IDAFAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDAFASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_Accept.htm">Accept</a></td><td>
            Dispatches to the specific visit method for this MIME entity.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimePart_ComputeContentMd5.htm">ComputeContentMd5</a></td><td>
            Compute the MD5 checksum of the content.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://learn.microsoft.com/dotnet/api/system.idisposable.dispose" target="_blank" rel="noopener noreferrer">Dispose</a></td><td><br />(Inherited from <a href="https://learn.microsoft.com/dotnet/api/system.idisposable" target="_blank" rel="noopener noreferrer">IDisposable</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimePart_GetBestEncoding_1.htm">GetBestEncoding(EncodingConstraint, CancellationToken)</a></td><td>
            Calculate the most efficient content encoding given the specified constraint.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimePart_GetBestEncoding.htm">GetBestEncoding(EncodingConstraint, Int32, CancellationToken)</a></td><td>
            Calculate the most efficient content encoding given the specified constraint.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_ITextPart_GetText_1.htm">GetText(Encoding)</a></td><td>
            Get the decoded text content using the provided charset encoding to
            override the charset specified in the Content-Type parameters.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_ITextPart_GetText_2.htm">GetText(Encoding<span id="LST12C2AC2E_0" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Get the decoded text and the encoding used to convert it into unicode.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_ITextPart_GetText.htm">GetText(String)</a></td><td>
            Get the decoded text content using the provided charset to override
            the charset specified in the Content-Type parameters.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_Prepare.htm">Prepare</a></td><td>
            Prepare the MIME entity for transport using the specified encoding constraints.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_ITextPart_SetText_1.htm">SetText(Encoding, String)</a></td><td>
            Set the text content and the charset parameter in the Content-Type header.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_ITextPart_SetText.htm">SetText(String, String)</a></td><td>
            Set the text content and the charset parameter in the Content-Type header.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_ITextPart_TryDetectEncoding.htm">TryDetectEncoding</a></td><td>
            Try to detect the encoding of the text content.
            </td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimePart_VerifyContentMd5.htm">VerifyContentMd5</a></td><td>
            Verify the Content-Md5 value against an independently computed md5sum.
            <br />(Inherited from <a href="T_MimeKit_IMimePart.htm">IMimePart</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteTo_5.htm">WriteTo(Stream, CancellationToken)</a></td><td>
            Write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified output stream.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteTo_7.htm">WriteTo(String, CancellationToken)</a></td><td>
            Write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified file.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteTo_1.htm">WriteTo(FormatOptions, Stream, CancellationToken)</a></td><td>
            Write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified output stream.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteTo_3.htm">WriteTo(FormatOptions, String, CancellationToken)</a></td><td>
            Write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified file.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteTo_4.htm">WriteTo(Stream, Boolean, CancellationToken)</a></td><td>
            Write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified output stream.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteTo_6.htm">WriteTo(String, Boolean, CancellationToken)</a></td><td>
            Write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified file.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteTo.htm">WriteTo(FormatOptions, Stream, Boolean, CancellationToken)</a></td><td>
            Write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified output stream.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteTo_2.htm">WriteTo(FormatOptions, String, Boolean, CancellationToken)</a></td><td>
            Write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified file.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteToAsync_5.htm">WriteToAsync(Stream, CancellationToken)</a></td><td>
            Asynchronously write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified output stream.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteToAsync_7.htm">WriteToAsync(String, CancellationToken)</a></td><td>
            Asynchronously write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified file.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteToAsync_1.htm">WriteToAsync(FormatOptions, Stream, CancellationToken)</a></td><td>
            Asynchronously write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified output stream.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteToAsync_3.htm">WriteToAsync(FormatOptions, String, CancellationToken)</a></td><td>
            Asynchronously write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified file.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteToAsync_4.htm">WriteToAsync(Stream, Boolean, CancellationToken)</a></td><td>
            Asynchronously write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified output stream.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteToAsync_6.htm">WriteToAsync(String, Boolean, CancellationToken)</a></td><td>
            Asynchronously write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified file.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteToAsync.htm">WriteToAsync(FormatOptions, Stream, Boolean, CancellationToken)</a></td><td>
            Asynchronously write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified output stream.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IMimeEntity_WriteToAsync_2.htm">WriteToAsync(FormatOptions, String, Boolean, CancellationToken)</a></td><td>
            Asynchronously write the <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a> to the specified file.
            <br />(Inherited from <a href="T_MimeKit_IMimeEntity.htm">IMimeEntity</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection"><p>Unless overridden, all textual parts parsed by the <a href="T_MimeKit_MimeParser.htm">MimeParser</a>,
            such as text/plain or text/html, will be represented by a <a href="T_MimeKit_TextPart.htm">TextPart</a>.</p><p>For more information about text media types, see section 4.1 of
            <a href="https://tools.ietf.org/html/rfc2046#section-4.1">rfc2046</a>.</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCC')" onkeypress="SectionExpandCollapse_CheckKey('IDCC', event)" tabindex="0"><img id="IDCCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDCCSection" class="collapsibleSection"><div id="IDACC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDACC_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDACC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDACC');return false;" title="Copy">Copy</a></div></div><div id="IDACC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Visits a MimeMessage and generates HTML suitable to be rendered by a browser control.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">class</span> HtmlPreviewVisitor : MimeVisitor
{
    List&lt;MultipartRelated&gt; stack = <span class="highlight-keyword">new</span> List&lt;MultipartRelated&gt; ();
    List&lt;MimeEntity&gt; attachments = <span class="highlight-keyword">new</span> List&lt;MimeEntity&gt; ();
    <span class="highlight-keyword">string</span> body;

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Creates a new HtmlPreviewVisitor.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> HtmlPreviewVisitor ()
    {
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// The list of attachments that were in the MimeMessage.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> IList&lt;MimeEntity&gt; Attachments {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> attachments; }
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// The HTML string that can be set on the BrowserControl.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> HtmlBody {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> body ?? <span class="highlight-keyword">string</span>.Empty; }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartAlternative (MultipartAlternative alternative)
    {
        <span class="highlight-comment">// walk the multipart/alternative children backwards from greatest level of faithfulness to the least faithful</span>
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = alternative.Count - <span class="highlight-number">1</span>; i &gt;= <span class="highlight-number">0</span> &amp;&amp; body == <span class="highlight-keyword">null</span>; i--)
            alternative[i].Accept (<span class="highlight-keyword">this</span>);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartRelated (MultipartRelated related)
    {
        <span class="highlight-keyword">var</span> root = related.Root;

        <span class="highlight-comment">// push this multipart/related onto our stack</span>
        stack.Add (related);

        <span class="highlight-comment">// visit the root document</span>
        root.Accept (<span class="highlight-keyword">this</span>);

        <span class="highlight-comment">// pop this multipart/related off our stack</span>
        stack.RemoveAt (stack.Count - <span class="highlight-number">1</span>);
    }

    <span class="highlight-comment">// look up the image based on the img src url within our multipart/related stack</span>
    <span class="highlight-keyword">bool</span> TryGetImage (<span class="highlight-keyword">string</span> url, <span class="highlight-keyword">out</span> MimePart image)
    {
        UriKind kind;
        <span class="highlight-keyword">int</span> index;
        Uri uri;

        <span class="highlight-keyword">if</span> (Uri.IsWellFormedUriString (url, UriKind.Absolute))
            kind = UriKind.Absolute;
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (Uri.IsWellFormedUriString (url, UriKind.Relative))
            kind = UriKind.Relative;
        <span class="highlight-keyword">else</span>
            kind = UriKind.RelativeOrAbsolute;

        <span class="highlight-keyword">try</span> {
            uri = <span class="highlight-keyword">new</span> Uri (url, kind);
        } <span class="highlight-keyword">catch</span> {
            image = <span class="highlight-keyword">null</span>;
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
        }

        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = stack.Count - <span class="highlight-number">1</span>; i &gt;= <span class="highlight-number">0</span>; i--) {
            <span class="highlight-keyword">if</span> ((index = stack[i].IndexOf (uri)) == <span class="highlight-number">-1</span>)
                <span class="highlight-keyword">continue</span>;

            image = stack[i][index] <span class="highlight-keyword">as</span> MimePart;
            <span class="highlight-keyword">return</span> image != <span class="highlight-keyword">null</span>;
        }

        image = <span class="highlight-keyword">null</span>;

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Get a data: URI for the image attachment.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;remarks&gt;</span>
    <span class="highlight-comment">/// Encodes the image attachment into a string suitable for setting as a src= attribute value in</span>
    <span class="highlight-comment">/// an img tag.</span>
    <span class="highlight-comment">/// &lt;/remarks&gt;</span>
    <span class="highlight-comment">/// &lt;returns&gt;The data: URI.&lt;/returns&gt;</span>
    <span class="highlight-comment">/// &lt;param name="image"&gt;The image attachment.&lt;/param&gt;</span>
    <span class="highlight-keyword">string</span> GetDataUri (MimePart image)
    {
        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> memory = <span class="highlight-keyword">new</span> MemoryStream ()) {
            image.Content.DecodeTo (memory);
            <span class="highlight-keyword">var</span> buffer = memory.GetBuffer ();
            <span class="highlight-keyword">var</span> length = (<span class="highlight-keyword">int</span>) memory.Length;
            <span class="highlight-keyword">var</span> base64 = Convert.ToBase64String (buffer, <span class="highlight-number">0</span>, length);

            <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"data:{0};base64,{1}"</span>, image.ContentType.MimeType, base64);
        }
    }

    <span class="highlight-comment">// Replaces &lt;img src=...&gt; urls that refer to images embedded within the message with</span>
    <span class="highlight-comment">// "file://" urls that the browser control will actually be able to load.</span>
    <span class="highlight-keyword">void</span> HtmlTagCallback (HtmlTagContext ctx, HtmlWriter htmlWriter)
    {
        <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Meta &amp;&amp; !ctx.IsEndTag) {
            <span class="highlight-keyword">bool</span> isContentType = <span class="highlight-keyword">false</span>;

            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// replace charsets with "utf-8" since our output will be in utf-8 (and not whatever the original charset was)</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.Charset) {
                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (<span class="highlight-literal">"utf-8"</span>);
                } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (isContentType &amp;&amp; attribute.Id == HtmlAttributeId.Content) {
                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (<span class="highlight-literal">"text/html; charset=utf-8"</span>);
                } <span class="highlight-keyword">else</span> {
                    <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.HttpEquiv &amp;&amp; attribute.Value != <span class="highlight-keyword">null</span>
                        &amp;&amp; attribute.Value.Equals (<span class="highlight-literal">"Content-Type"</span>, StringComparison.OrdinalIgnoreCase))
                        isContentType = <span class="highlight-keyword">true</span>;

                    htmlWriter.WriteAttribute (attribute);
                }
            }
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Image &amp;&amp; !ctx.IsEndTag &amp;&amp; stack.Count &gt; <span class="highlight-number">0</span>) {
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// replace the src attribute with a "data:" URL</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.Src) {
                    <span class="highlight-keyword">if</span> (!TryGetImage (attribute.Value, <span class="highlight-keyword">out</span> <span class="highlight-keyword">var</span> image)) {
                        htmlWriter.WriteAttribute (attribute);
                        <span class="highlight-keyword">continue</span>;
                    }

                    <span class="highlight-keyword">var</span> dataUri = GetDataUri (image);

                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (dataUri);
                } <span class="highlight-keyword">else</span> {
                    htmlWriter.WriteAttribute (attribute);
                }
            }
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Body &amp;&amp; !ctx.IsEndTag) {
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// add and/or replace oncontextmenu="return false;"</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Name.Equals (<span class="highlight-literal">"oncontextmenu"</span>, StringComparison.OrdinalIgnoreCase))
                    <span class="highlight-keyword">continue</span>;

                htmlWriter.WriteAttribute (attribute);
            }

            htmlWriter.WriteAttribute (<span class="highlight-literal">"oncontextmenu"</span>, <span class="highlight-literal">"return false;"</span>);
        } <span class="highlight-keyword">else</span> {
            <span class="highlight-comment">// pass the tag through to the output</span>
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">true</span>);
        }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTextPart (TextPart entity)
    {
        TextConverter converter;

        <span class="highlight-keyword">if</span> (body != <span class="highlight-keyword">null</span>) {
            <span class="highlight-comment">// since we've already found the body, treat this as an attachment</span>
            attachments.Add (entity);
            <span class="highlight-keyword">return</span>;
        }

        <span class="highlight-keyword">if</span> (entity.IsHtml) {
            converter = <span class="highlight-keyword">new</span> HtmlToHtml {
                HtmlTagCallback = HtmlTagCallback
            };
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (entity.IsFlowed) {
            <span class="highlight-keyword">var</span> flowed = <span class="highlight-keyword">new</span> FlowedToHtml ();
            <span class="highlight-keyword">string</span> delsp;

            <span class="highlight-keyword">if</span> (entity.ContentType.Parameters.TryGetValue (<span class="highlight-literal">"delsp"</span>, <span class="highlight-keyword">out</span> delsp))
                flowed.DeleteSpace = delsp.Equals (<span class="highlight-literal">"yes"</span>, StringComparison.OrdinalIgnoreCase);

            converter = flowed;
        } <span class="highlight-keyword">else</span> {
            converter = <span class="highlight-keyword">new</span> TextToHtml ();
        }

        body = converter.Convert (entity.Text);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTnefPart (TnefPart entity)
    {
        <span class="highlight-comment">// extract any attachments in the MS-TNEF part</span>
        attachments.AddRange (entity.ExtractAttachments ());
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMessagePart (MessagePart entity)
    {
        <span class="highlight-comment">// treat message/rfc822 parts as attachments</span>
        attachments.Add (entity);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMimePart (MimePart entity)
    {
        <span class="highlight-comment">// realistically, if we've gotten this far, then we can treat this as an attachment</span>
        <span class="highlight-comment">// even if the IsAttachment property is false.</span>
        attachments.Add (entity);
    }
}</pre></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="N_MimeKit.htm">MimeKit Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter"><!-- Global site tag (gtag.js) - Google Analytics -->
<script src="https://www.googletagmanager.com/gtag/js?id=UA-63841238-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-63841238-1');
</script><p><a href="https://github.com/jstedfast" target="_blank" rel="noopener noreferrer">Copyright © 2013-2025 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit%20Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>