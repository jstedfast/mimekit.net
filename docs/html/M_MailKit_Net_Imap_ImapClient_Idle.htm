<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ImapClient.Idle Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Idle method" /><meta name="System.Keywords" content="ImapClient.Idle method" /><meta name="Microsoft.Help.F1" content="MailKit.Net.Imap.ImapClient.Idle" /><meta name="Microsoft.Help.Id" content="M:MailKit.Net.Imap.ImapClient.Idle(System.Threading.CancellationToken,System.Threading.CancellationToken)" /><meta name="Description" content="Toggle the into the IDLE state." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="MailKit.Net.Imap" /><meta name="file" content="M_MailKit_Net_Imap_ImapClient_Idle" /><meta name="guid" content="M_MailKit_Net_Imap_ImapClient_Idle" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_MailKit_Net_Imap.htm" title="MailKit.Net.Imap" tocid="N_MailKit_Net_Imap">MailKit.Net.Imap</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_MailKit_Net_Imap_ImapClient.htm" title="ImapClient Class" tocid="T_MailKit_Net_Imap_ImapClient">ImapClient Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_MailKit_Net_Imap_ImapClient.htm" title="ImapClient Methods" tocid="Methods_T_MailKit_Net_Imap_ImapClient">ImapClient Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_Authenticate.htm" title="Authenticate Method " tocid="Overload_MailKit_Net_Imap_ImapClient_Authenticate">Authenticate Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_AuthenticateAsync.htm" title="AuthenticateAsync Method " tocid="Overload_MailKit_Net_Imap_ImapClient_AuthenticateAsync">AuthenticateAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_Compress.htm" title="Compress Method " tocid="M_MailKit_Net_Imap_ImapClient_Compress">Compress Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_CompressAsync.htm" title="CompressAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_CompressAsync">CompressAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_Connect.htm" title="Connect Method " tocid="Overload_MailKit_Net_Imap_ImapClient_Connect">Connect Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_ConnectAsync.htm" title="ConnectAsync Method " tocid="Overload_MailKit_Net_Imap_ImapClient_ConnectAsync">ConnectAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_CreateImapFolder.htm" title="CreateImapFolder Method " tocid="M_MailKit_Net_Imap_ImapClient_CreateImapFolder">CreateImapFolder Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_DisableNotify.htm" title="DisableNotify Method " tocid="M_MailKit_Net_Imap_ImapClient_DisableNotify">DisableNotify Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_DisableNotifyAsync.htm" title="DisableNotifyAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_DisableNotifyAsync">DisableNotifyAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_Disconnect.htm" title="Disconnect Method " tocid="M_MailKit_Net_Imap_ImapClient_Disconnect">Disconnect Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_DisconnectAsync.htm" title="DisconnectAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_DisconnectAsync">DisconnectAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_Dispose.htm" title="Dispose Method " tocid="Overload_MailKit_Net_Imap_ImapClient_Dispose">Dispose Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_EnableQuickResync.htm" title="EnableQuickResync Method " tocid="M_MailKit_Net_Imap_ImapClient_EnableQuickResync">EnableQuickResync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_EnableQuickResyncAsync.htm" title="EnableQuickResyncAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_EnableQuickResyncAsync">EnableQuickResyncAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_EnableUTF8.htm" title="EnableUTF8 Method " tocid="M_MailKit_Net_Imap_ImapClient_EnableUTF8">EnableUTF8 Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_EnableUTF8Async.htm" title="EnableUTF8Async Method " tocid="M_MailKit_Net_Imap_ImapClient_EnableUTF8Async">EnableUTF8Async Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_GetFolder.htm" title="GetFolder Method " tocid="Overload_MailKit_Net_Imap_ImapClient_GetFolder">GetFolder Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_GetFolderAsync.htm" title="GetFolderAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_GetFolderAsync">GetFolderAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_GetFolders.htm" title="GetFolders Method " tocid="Overload_MailKit_Net_Imap_ImapClient_GetFolders">GetFolders Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_GetFoldersAsync.htm" title="GetFoldersAsync Method " tocid="Overload_MailKit_Net_Imap_ImapClient_GetFoldersAsync">GetFoldersAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_GetMetadata.htm" title="GetMetadata Method " tocid="Overload_MailKit_Net_Imap_ImapClient_GetMetadata">GetMetadata Method </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MailKit_Net_Imap_ImapClient_GetMetadataAsync.htm" title="GetMetadataAsync Method " tocid="Overload_MailKit_Net_Imap_ImapClient_GetMetadataAsync">GetMetadataAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_Identify.htm" title="Identify Method " tocid="M_MailKit_Net_Imap_ImapClient_Identify">Identify Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_IdentifyAsync.htm" title="IdentifyAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_IdentifyAsync">IdentifyAsync Method </a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_Idle.htm" title="Idle Method " tocid="M_MailKit_Net_Imap_ImapClient_Idle">Idle Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_IdleAsync.htm" title="IdleAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_IdleAsync">IdleAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_NoOp.htm" title="NoOp Method " tocid="M_MailKit_Net_Imap_ImapClient_NoOp">NoOp Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_NoOpAsync.htm" title="NoOpAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_NoOpAsync">NoOpAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_Notify.htm" title="Notify Method " tocid="M_MailKit_Net_Imap_ImapClient_Notify">Notify Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_NotifyAsync.htm" title="NotifyAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_NotifyAsync">NotifyAsync Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_OnWebAlert.htm" title="OnWebAlert Method " tocid="M_MailKit_Net_Imap_ImapClient_OnWebAlert">OnWebAlert Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_SetMetadata.htm" title="SetMetadata Method " tocid="M_MailKit_Net_Imap_ImapClient_SetMetadata">SetMetadata Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Imap_ImapClient_SetMetadataAsync.htm" title="SetMetadataAsync Method " tocid="M_MailKit_Net_Imap_ImapClient_SetMetadataAsync">SetMetadataAsync Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>ImapClient<span id="LSTAA6CF141_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAA6CF141_0?cpp=::|nu=.");</script>Idle Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Toggle the <a href="T_MailKit_Net_Imap_ImapClient.htm">ImapClient</a> into the IDLE state.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_MailKit_Net_Imap.htm">MailKit.Net.Imap</a><br />
    <strong>Assembly:</strong>
   MailKit (in MailKit.dll) Version: 2.13.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">void</span> <span class="identifier">Idle</span>(
	<span class="identifier">CancellationToken</span> <span class="parameter">doneToken</span>,
	<span class="identifier">CancellationToken</span> <span class="parameter">cancellationToken</span> = <span class="keyword">default</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">doneToken</span></dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noopener noreferrer">System.Threading<span id="LSTAA6CF141_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAA6CF141_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CancellationToken</a><br />The cancellation token used to return to the non-idle state.</dd><dt><span class="parameter">cancellationToken</span> (Optional)</dt><dd>Type: <a href="https://docs.microsoft.com/dotnet/api/system.threading.cancellationtoken" target="_blank" rel="noopener noreferrer">System.Threading<span id="LSTAA6CF141_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAA6CF141_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CancellationToken</a><br />The cancellation token.</dd></dl><h4 class="subHeading">Implements</h4><a href="M_MailKit_Net_Imap_IImapClient_Idle.htm">IImapClient<span id="LSTAA6CF141_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LSTAA6CF141_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Idle(CancellationToken, CancellationToken)</a><br /></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Exceptions</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="tableSection"><table><tr><th>Exception</th><th>Condition</th></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.argumentexception" target="_blank" rel="noopener noreferrer">ArgumentException</a></td><td><span class="parameter">doneToken</span> must be cancellable (i.e. <a href="https://docs.microsoft.com/dotnet/api/system.threading.cancellationtoken.none#System_Threading_CancellationToken_None" target="_blank" rel="noopener noreferrer">None</a> cannot be used).
            </td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.objectdisposedexception" target="_blank" rel="noopener noreferrer">ObjectDisposedException</a></td><td>
            The <a href="T_MailKit_Net_Imap_ImapClient.htm">ImapClient</a> has been disposed.
            </td></tr><tr><td><a href="T_MailKit_ServiceNotConnectedException.htm">ServiceNotConnectedException</a></td><td>
            The <a href="T_MailKit_Net_Imap_ImapClient.htm">ImapClient</a> is not connected.
            </td></tr><tr><td><a href="T_MailKit_ServiceNotAuthenticatedException.htm">ServiceNotAuthenticatedException</a></td><td>
            The <a href="T_MailKit_Net_Imap_ImapClient.htm">ImapClient</a> is not authenticated.
            </td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.invalidoperationexception" target="_blank" rel="noopener noreferrer">InvalidOperationException</a></td><td>
            A <a href="T_MailKit_Net_Imap_ImapFolder.htm">ImapFolder</a> has not been opened.
            </td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.notsupportedexception" target="_blank" rel="noopener noreferrer">NotSupportedException</a></td><td>
            The IMAP server does not support the IDLE extension.
            </td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.operationcanceledexception" target="_blank" rel="noopener noreferrer">OperationCanceledException</a></td><td>
            The operation was canceled via the cancellation token.
            </td></tr><tr><td><a href="https://docs.microsoft.com/dotnet/api/system.io.ioexception" target="_blank" rel="noopener noreferrer">IOException</a></td><td>
            An I/O error occurred.
            </td></tr><tr><td><a href="T_MailKit_Net_Imap_ImapCommandException.htm">ImapCommandException</a></td><td>
            The server replied to the IDLE command with a NO or BAD response.
            </td></tr><tr><td><a href="T_MailKit_Net_Imap_ImapProtocolException.htm">ImapProtocolException</a></td><td>
            The server responded with an unexpected token.
            </td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID3RBSection" class="collapsibleSection"><p>When a client enters the IDLE state, the IMAP server will send
            events to the client as they occur on the selected folder. These events
            may include notifications of new messages arriving, expunge notifications,
            flag changes, etc.</p><p>Due to the nature of the IDLE command, a folder must be selected
            before a client can enter into the IDLE state. This can be done by
            opening a folder using
            <a href="M_MailKit_MailFolder_Open.htm">Open(FolderAccess, CancellationToken)</a>
            or any of the other variants.</p><p>While the IDLE command is running, no other commands may be issued until the
            <span class="parameter">doneToken</span> is cancelled.</p><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Note" /> Note</th></tr><tr><td>It is especially important to cancel the <span class="parameter">doneToken</span>
            before cancelling the <span class="parameter">cancellationToken</span> when using SSL or TLS due to
            the fact that <a href="https://docs.microsoft.com/dotnet/api/system.net.security.sslstream" target="_blank" rel="noopener noreferrer">SslStream</a> cannot be polled.</td></tr></table></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID4RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAMBA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAMBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAMBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAMBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-keyword">using</span> System.Threading.Tasks;
<span class="highlight-keyword">using</span> System.Collections.Generic;

<span class="highlight-keyword">using</span> MailKit;
<span class="highlight-keyword">using</span> MailKit.Net.Imap;
<span class="highlight-keyword">using</span> MailKit.Security;

<span class="highlight-keyword">namespace</span> ImapIdleExample {
    <span class="highlight-keyword">class</span> Program
    {
        <span class="highlight-comment">// Connection-related properties</span>
        <span class="highlight-keyword">const</span> SecureSocketOptions SslOptions = SecureSocketOptions.Auto;
        <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> Host = <span class="highlight-literal">"imap.gmail.com"</span>;
        <span class="highlight-keyword">const</span> <span class="highlight-keyword">int</span> Port = <span class="highlight-number">993</span>;

        <span class="highlight-comment">// Authentication-related properties</span>
        <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> Username = <span class="highlight-literal">"username@gmail.com"</span>;
        <span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> Password = <span class="highlight-literal">"password"</span>;

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main (<span class="highlight-keyword">string</span>[] args)
        {
            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> IdleClient (Host, Port, SslOptions, Username, Password)) {
                Console.WriteLine (<span class="highlight-literal">"Hit any key to end the demo."</span>);

                <span class="highlight-keyword">var</span> idleTask = client.RunAsync ();

                Task.Run (() =&gt; {
                    Console.ReadKey (<span class="highlight-keyword">true</span>);
                }).Wait ();

                client.Exit ();

                idleTask.GetAwaiter ().GetResult ();
            }
        }
    }

    <span class="highlight-keyword">class</span> IdleClient : IDisposable
    {
        <span class="highlight-keyword">readonly</span> <span class="highlight-keyword">string</span> host, username, password;
        <span class="highlight-keyword">readonly</span> SecureSocketOptions sslOptions;
        <span class="highlight-keyword">readonly</span> <span class="highlight-keyword">int</span> port;
        List&lt;IMessageSummary&gt; messages;
        CancellationTokenSource cancel;
        CancellationTokenSource done;
        <span class="highlight-keyword">bool</span> messagesArrived;
        ImapClient client;

        <span class="highlight-keyword">public</span> IdleClient (<span class="highlight-keyword">string</span> host, <span class="highlight-keyword">int</span> port, SecureSocketOptions sslOptions, <span class="highlight-keyword">string</span> username, <span class="highlight-keyword">string</span> password)
        {
            <span class="highlight-keyword">this</span>.client = <span class="highlight-keyword">new</span> ImapClient (<span class="highlight-keyword">new</span> ProtocolLogger (Console.OpenStandardError ()));
            <span class="highlight-keyword">this</span>.messages = <span class="highlight-keyword">new</span> List&lt;IMessageSummary&gt; ();
            <span class="highlight-keyword">this</span>.cancel = <span class="highlight-keyword">new</span> CancellationTokenSource ();
            <span class="highlight-keyword">this</span>.sslOptions = sslOptions;
            <span class="highlight-keyword">this</span>.username = username;
            <span class="highlight-keyword">this</span>.password = password;
            <span class="highlight-keyword">this</span>.host = host;
            <span class="highlight-keyword">this</span>.port = port;
        }

        <span class="highlight-keyword">async</span> Task ReconnectAsync ()
        {
            <span class="highlight-keyword">if</span> (!client.IsConnected)
                <span class="highlight-keyword">await</span> client.ConnectAsync (host, port, sslOptions, cancel.Token);

            <span class="highlight-keyword">if</span> (!client.IsAuthenticated) {
                <span class="highlight-keyword">await</span> client.AuthenticateAsync (username, password, cancel.Token);

                <span class="highlight-keyword">await</span> client.Inbox.OpenAsync (FolderAccess.ReadOnly, cancel.Token);
            }
        }

        <span class="highlight-keyword">async</span> Task FetchMessageSummariesAsync (<span class="highlight-keyword">bool</span> print)
        {
            IList&lt;IMessageSummary&gt; fetched = <span class="highlight-keyword">null</span>;

            <span class="highlight-keyword">do</span> {
                <span class="highlight-keyword">try</span> {
                    <span class="highlight-comment">// fetch summary information for messages that we don't already have</span>
                    <span class="highlight-keyword">int</span> startIndex = messages.Count;

                    fetched = client.Inbox.Fetch (startIndex, <span class="highlight-number">-1</span>, MessageSummaryItems.Full | MessageSummaryItems.UniqueId, cancel.Token);
                    <span class="highlight-keyword">break</span>;
                } <span class="highlight-keyword">catch</span> (ImapProtocolException) {
                    <span class="highlight-comment">// protocol exceptions often result in the client getting disconnected</span>
                    <span class="highlight-keyword">await</span> ReconnectAsync ();
                } <span class="highlight-keyword">catch</span> (IOException) {
                    <span class="highlight-comment">// I/O exceptions always result in the client getting disconnected</span>
                    <span class="highlight-keyword">await</span> ReconnectAsync ();
                }
            } <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>);

            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> message <span class="highlight-keyword">in</span> fetched) {
                <span class="highlight-keyword">if</span> (print)
                    Console.WriteLine (<span class="highlight-literal">"{0}: new message: {1}"</span>, client.Inbox, message.Envelope.Subject);
                messages.Add (message);
            }
        }

        <span class="highlight-keyword">async</span> Task WaitForNewMessagesAsync ()
        {
            <span class="highlight-keyword">do</span> {
                <span class="highlight-keyword">try</span> {
                    <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (ImapCapabilities.Idle)) {
                        <span class="highlight-comment">// Note: IMAP servers are only supposed to drop the connection after 30 minutes, so normally</span>
                        <span class="highlight-comment">// we'd IDLE for a max of, say, ~29 minutes... but GMail seems to drop idle connections after</span>
                        <span class="highlight-comment">// about 10 minutes, so we'll only idle for 9 minutes.</span>
                        done = <span class="highlight-keyword">new</span> CancellationTokenSource (<span class="highlight-keyword">new</span> TimeSpan (<span class="highlight-number">0</span>, <span class="highlight-number">9</span>, <span class="highlight-number">0</span>));
                        <span class="highlight-keyword">try</span> {
                            <span class="highlight-keyword">await</span> client.IdleAsync (done.Token, cancel.Token);
                        } <span class="highlight-keyword">finally</span> {
                            done.Dispose ();
                            done = <span class="highlight-keyword">null</span>;
                        }
                    } <span class="highlight-keyword">else</span> {
                        <span class="highlight-comment">// Note: we don't want to spam the IMAP server with NOOP commands, so lets wait a minute</span>
                        <span class="highlight-comment">// between each NOOP command.</span>
                        <span class="highlight-keyword">await</span> Task.Delay (<span class="highlight-keyword">new</span> TimeSpan (<span class="highlight-number">0</span>, <span class="highlight-number">1</span>, <span class="highlight-number">0</span>), cancel.Token);
                        <span class="highlight-keyword">await</span> client.NoOpAsync (cancel.Token);
                    }
                    <span class="highlight-keyword">break</span>;
                } <span class="highlight-keyword">catch</span> (ImapProtocolException) {
                    <span class="highlight-comment">// protocol exceptions often result in the client getting disconnected</span>
                    <span class="highlight-keyword">await</span> ReconnectAsync ();
                } <span class="highlight-keyword">catch</span> (IOException) {
                    <span class="highlight-comment">// I/O exceptions always result in the client getting disconnected</span>
                    <span class="highlight-keyword">await</span> ReconnectAsync ();
                }
            } <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>);
        }

        <span class="highlight-keyword">async</span> Task IdleAsync ()
        {
            <span class="highlight-keyword">do</span> {
                <span class="highlight-keyword">try</span> {
                    <span class="highlight-keyword">await</span> WaitForNewMessagesAsync ();

                    <span class="highlight-keyword">if</span> (messagesArrived) {
                        <span class="highlight-keyword">await</span> FetchMessageSummariesAsync (<span class="highlight-keyword">true</span>);
                        messagesArrived = <span class="highlight-keyword">false</span>;
                    }
                } <span class="highlight-keyword">catch</span> (OperationCanceledException) {
                    <span class="highlight-keyword">break</span>;
                }
            } <span class="highlight-keyword">while</span> (!cancel.IsCancellationRequested);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">async</span> Task RunAsync ()
        {
            <span class="highlight-comment">// connect to the IMAP server and get our initial list of messages</span>
            <span class="highlight-keyword">try</span> {
                <span class="highlight-keyword">await</span> ReconnectAsync ();
                <span class="highlight-keyword">await</span> FetchMessageSummariesAsync (<span class="highlight-keyword">false</span>);
            } <span class="highlight-keyword">catch</span> (OperationCanceledException) {
                <span class="highlight-keyword">await</span> client.DisconnectAsync (<span class="highlight-keyword">true</span>);
                <span class="highlight-keyword">return</span>;
            }

            <span class="highlight-comment">// Note: We capture client.Inbox here because cancelling IdleAsync() *may* require</span>
            <span class="highlight-comment">// disconnecting the IMAP client connection, and, if it does, the `client.Inbox`</span>
            <span class="highlight-comment">// property will no longer be accessible which means we won't be able to disconnect</span>
            <span class="highlight-comment">// our event handlers.</span>
            <span class="highlight-keyword">var</span> inbox = client.Inbox;

            <span class="highlight-comment">// keep track of changes to the number of messages in the folder (this is how we'll tell if new messages have arrived).</span>
            inbox.CountChanged += OnCountChanged;

            <span class="highlight-comment">// keep track of messages being expunged so that when the CountChanged event fires, we can tell if it's</span>
            <span class="highlight-comment">// because new messages have arrived vs messages being removed (or some combination of the two).</span>
            inbox.MessageExpunged += OnMessageExpunged;

            <span class="highlight-comment">// keep track of flag changes</span>
            inbox.MessageFlagsChanged += OnMessageFlagsChanged;

            <span class="highlight-keyword">await</span> IdleAsync ();

            inbox.MessageFlagsChanged -= OnMessageFlagsChanged;
            inbox.MessageExpunged -= OnMessageExpunged;
            inbox.CountChanged -= OnCountChanged;

            <span class="highlight-keyword">await</span> client.DisconnectAsync (<span class="highlight-keyword">true</span>);
        }

        <span class="highlight-comment">// Note: the CountChanged event will fire when new messages arrive in the folder and/or when messages are expunged.</span>
        <span class="highlight-keyword">void</span> OnCountChanged (<span class="highlight-keyword">object</span> sender, EventArgs e)
        {
            <span class="highlight-keyword">var</span> folder = (ImapFolder) sender;

            <span class="highlight-comment">// Note: because we are keeping track of the MessageExpunged event and updating our</span>
            <span class="highlight-comment">// 'messages' list, we know that if we get a CountChanged event and folder.Count is</span>
            <span class="highlight-comment">// larger than messages.Count, then it means that new messages have arrived.</span>
            <span class="highlight-keyword">if</span> (folder.Count &gt; messages.Count) {
                <span class="highlight-keyword">int</span> arrived = folder.Count - messages.Count;

                <span class="highlight-keyword">if</span> (arrived &gt; <span class="highlight-number">1</span>)
                    Console.WriteLine (<span class="highlight-literal">"\t{0} new messages have arrived."</span>, arrived);
                <span class="highlight-keyword">else</span>
                    Console.WriteLine (<span class="highlight-literal">"\t1 new message has arrived."</span>);

                <span class="highlight-comment">// Note: your first instinct may be to fetch these new messages now, but you cannot do</span>
                <span class="highlight-comment">// that in this event handler (the ImapFolder is not re-entrant).</span>
                <span class="highlight-comment">// </span>
                <span class="highlight-comment">// Instead, cancel the `done` token and update our state so that we know new messages</span>
                <span class="highlight-comment">// have arrived. We'll fetch the summaries for these new messages later...</span>
                messagesArrived = <span class="highlight-keyword">true</span>;
                done?.Cancel ();
            }
        }

        <span class="highlight-keyword">void</span> OnMessageExpunged (<span class="highlight-keyword">object</span> sender, MessageEventArgs e)
        {
            <span class="highlight-keyword">var</span> folder = (ImapFolder) sender;

            <span class="highlight-keyword">if</span> (e.Index &lt; messages.Count) {
                <span class="highlight-keyword">var</span> message = messages[e.Index];

                Console.WriteLine (<span class="highlight-literal">"{0}: message #{1} has been expunged: {2}"</span>, folder, e.Index, message.Envelope.Subject);

                <span class="highlight-comment">// Note: If you are keeping a local cache of message information</span>
                <span class="highlight-comment">// (e.g. MessageSummary data) for the folder, then you'll need</span>
                <span class="highlight-comment">// to remove the message at e.Index.</span>
                messages.RemoveAt (e.Index);
            } <span class="highlight-keyword">else</span> {
                Console.WriteLine (<span class="highlight-literal">"{0}: message #{1} has been expunged."</span>, folder, e.Index);
            }
        }

        <span class="highlight-keyword">void</span> OnMessageFlagsChanged (<span class="highlight-keyword">object</span> sender, MessageFlagsChangedEventArgs e)
        {
            <span class="highlight-keyword">var</span> folder = (ImapFolder) sender;

            Console.WriteLine (<span class="highlight-literal">"{0}: flags have changed for message #{1} ({2})."</span>, folder, e.Index, e.Flags);
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Exit ()
        {
            cancel.Cancel ();
        }

        <span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Dispose ()
        {
            client.Dispose ();
            cancel.Dispose ();
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAMBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID5RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_MailKit_Net_Imap_ImapClient.htm">ImapClient Class</a></div><div class="seeAlsoStyle"><a href="N_MailKit_Net_Imap.htm">MailKit.Net.Imap Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><!-- Global site tag (gtag.js) - Google Analytics -->
<script src="https://www.googletagmanager.com/gtag/js?id=UA-63841238-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-63841238-1');
</script><p><a href="https://github.com/jstedfast" target="_blank" rel="noopener noreferrer">Copyright © 2013-2021 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit%20Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>