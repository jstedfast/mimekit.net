<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>ArcValidationResult.Chain Property </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="Chain property" /><meta name="System.Keywords" content="ArcValidationResult.Chain property" /><meta name="Microsoft.Help.F1" content="MimeKit.Cryptography.ArcValidationResult.Chain" /><meta name="Microsoft.Help.F1" content="MimeKit.Cryptography.ArcValidationResult.get_Chain" /><meta name="Microsoft.Help.Id" content="P:MimeKit.Cryptography.ArcValidationResult.Chain" /><meta name="Description" content="Get the signature validation results of the entire chain." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="MimeKit.Cryptography" /><meta name="file" content="P_MimeKit_Cryptography_ArcValidationResult_Chain" /><meta name="guid" content="P_MimeKit_Cryptography_ArcValidationResult_Chain" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_MimeKit_Cryptography.htm" title="MimeKit.Cryptography" tocid="N_MimeKit_Cryptography">MimeKit.Cryptography</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_MimeKit_Cryptography_ArcValidationResult.htm" title="ArcValidationResult Class" tocid="T_MimeKit_Cryptography_ArcValidationResult">ArcValidationResult Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_MimeKit_Cryptography_ArcValidationResult.htm" title="ArcValidationResult Properties" tocid="Properties_T_MimeKit_Cryptography_ArcValidationResult">ArcValidationResult Properties</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_MimeKit_Cryptography_ArcValidationResult_Chain.htm" title="Chain Property " tocid="P_MimeKit_Cryptography_ArcValidationResult_Chain">Chain Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_MimeKit_Cryptography_ArcValidationResult_ChainErrors.htm" title="ChainErrors Property " tocid="P_MimeKit_Cryptography_ArcValidationResult_ChainErrors">ChainErrors Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_MimeKit_Cryptography_ArcValidationResult_MessageSignature.htm" title="MessageSignature Property " tocid="P_MimeKit_Cryptography_ArcValidationResult_MessageSignature">MessageSignature Property </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/P_MimeKit_Cryptography_ArcValidationResult_Seals.htm" title="Seals Property " tocid="P_MimeKit_Cryptography_ArcValidationResult_Seals">Seals Property </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>ArcValidationResult<span id="LST6C25563A_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST6C25563A_0?cpp=::|nu=.");</script>Chain Property </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Get the signature validation results of the entire chain.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_MimeKit_Cryptography.htm">MimeKit.Cryptography</a><br />
    <strong>Assembly:</strong>
   MimeKit (in MimeKit.dll) Version: 3.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="identifier">ArcSignatureValidationResult</span> <span class="identifier">Chain</span> { <span class="keyword">get</span>; }</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><h4 class="subHeading">Property Value</h4>Type: <a href="T_MimeKit_Cryptography_ArcSignatureValidationResult.htm">ArcSignatureValidationResult</a><br />The signature validation results of the entire chain.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID2RBSection" class="collapsibleSection">
            Gets the signature validation results of the entire chain.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID3RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAABBA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAABBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAABBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAABBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-keyword">using</span> System.Threading.Tasks;
<span class="highlight-keyword">using</span> System.Collections.Generic;

<span class="highlight-keyword">using</span> Heijden.DNS;

<span class="highlight-keyword">using</span> Org.BouncyCastle.Crypto;

<span class="highlight-keyword">using</span> MimeKit;
<span class="highlight-keyword">using</span> MimeKit.Cryptography;

<span class="highlight-keyword">namespace</span> ArcVerifierExample
{
    <span class="highlight-comment">// Note: By using the DkimPublicKeyLocatorBase, we avoid having to parse the DNS TXT records</span>
    <span class="highlight-comment">// in order to get the public key ourselves.</span>
    <span class="highlight-keyword">class</span> ExamplePublicKeyLocator : DkimPublicKeyLocatorBase
    {
        <span class="highlight-keyword">readonly</span> Dictionary&lt;<span class="highlight-keyword">string</span>, AsymmetricKeyParameter&gt; cache;
        <span class="highlight-keyword">readonly</span> Resolver resolver;

        <span class="highlight-keyword">public</span> ExamplePublicKeyLocator ()
        {
            cache = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, AsymmetricKeyParameter&gt; ();

            resolver = <span class="highlight-keyword">new</span> Resolver (<span class="highlight-literal">"8.8.8.8"</span>) {
                TransportType = TransportType.Udp,
                UseCache = <span class="highlight-keyword">true</span>,
                Retries = <span class="highlight-number">3</span>
            };
        }

        AsymmetricKeyParameter DnsLookup (<span class="highlight-keyword">string</span> domain, <span class="highlight-keyword">string</span> selector, CancellationToken cancellationToken)
        {
            <span class="highlight-keyword">var</span> query = selector + <span class="highlight-literal">"._domainkey."</span> + domain;
            AsymmetricKeyParameter pubkey;

            <span class="highlight-comment">// checked if we've already fetched this key</span>
            <span class="highlight-keyword">if</span> (cache.TryGetValue (query, <span class="highlight-keyword">out</span> pubkey))
                <span class="highlight-keyword">return</span> pubkey;

            <span class="highlight-comment">// make a DNS query</span>
            <span class="highlight-keyword">var</span> response = resolver.Query (query, QType.TXT);
            <span class="highlight-keyword">var</span> builder = <span class="highlight-keyword">new</span> StringBuilder ();

            <span class="highlight-comment">// combine the TXT records into 1 string buffer</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> record <span class="highlight-keyword">in</span> response.RecordsTXT) {
                <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> text <span class="highlight-keyword">in</span> record.TXT)
                    builder.Append (text);
            }

            <span class="highlight-keyword">var</span> txt = builder.ToString ();

            <span class="highlight-comment">// DkimPublicKeyLocatorBase provides us with this helpful method.</span>
            pubkey = GetPublicKey (txt);

            cache.Add (query, pubkey);

            <span class="highlight-keyword">return</span> pubkey;
        }

        <span class="highlight-keyword">public</span> AsymmetricKeyParameter LocatePublicKey (<span class="highlight-keyword">string</span> methods, <span class="highlight-keyword">string</span> domain, <span class="highlight-keyword">string</span> selector, CancellationToken cancellationToken = <span class="highlight-keyword">default</span> (CancellationToken))
        {
            <span class="highlight-keyword">var</span> methodList = methods.Split (<span class="highlight-keyword">new</span> <span class="highlight-keyword">char</span>[] { <span class="highlight-literal">':'</span> }, StringSplitOptions.RemoveEmptyEntries);
            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; methodList.Length; i++) {
                <span class="highlight-keyword">if</span> (methodList[i] == <span class="highlight-literal">"dns/txt"</span>)
                    <span class="highlight-keyword">return</span> DnsLookup (domain, selector, cancellationToken);
            }

            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> NotSupportedException (<span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"{0} does not include any suported lookup methods."</span>, methods));
        }

        <span class="highlight-keyword">public</span> Task&lt;AsymmetricKeyParameter&gt; LocatePublicKeyAsync (<span class="highlight-keyword">string</span> methods, <span class="highlight-keyword">string</span> domain, <span class="highlight-keyword">string</span> selector, CancellationToken cancellationToken = <span class="highlight-keyword">default</span> (CancellationToken))
        {
            <span class="highlight-keyword">return</span> Task.Run (() =&gt; {
                <span class="highlight-keyword">return</span> LocatePublicKey (methods, domain, selector, cancellationToken);
            }, cancellationToken);
        }
    }

    <span class="highlight-keyword">class</span> Program
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main (<span class="highlight-keyword">string</span>[] args)
        {
            <span class="highlight-keyword">if</span> (args.Length == <span class="highlight-number">0</span>) {
                Help ();
                <span class="highlight-keyword">return</span>;
            }

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; args.Length; i++) {
                <span class="highlight-keyword">if</span> (args[i] == <span class="highlight-literal">"--help"</span>) {
                    Help ();
                    <span class="highlight-keyword">return</span>;
                }
            }

            <span class="highlight-keyword">var</span> locator = <span class="highlight-keyword">new</span> ExamplePublicKeyLocator ();
            <span class="highlight-keyword">var</span> verifier = <span class="highlight-keyword">new</span> ArcVerifier (locator);

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; args.Length; i++) {
                <span class="highlight-keyword">if</span> (!File.Exists (args[i])) {
                    Console.Error.WriteLine (<span class="highlight-literal">"{0}: No such file."</span>, args[i]);
                    <span class="highlight-keyword">continue</span>;
                }

                Console.Write (<span class="highlight-literal">"{0} -&gt; "</span>, args[i]);

                <span class="highlight-keyword">var</span> message = MimeMessage.Load (args[i]);
                <span class="highlight-keyword">var</span> result = verifier.Verify (message);

                <span class="highlight-keyword">switch</span> (result.Chain) {
                <span class="highlight-keyword">case</span> ArcSignatureValidationResult.None:
                    Console.WriteLine (<span class="highlight-literal">"No ARC signatures to verify."</span>);
                    <span class="highlight-keyword">break</span>;
                <span class="highlight-keyword">case</span> ArcSignatureValidationResult.Pass:
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine (<span class="highlight-literal">"PASS"</span>);
                    Console.ResetColor ();
                    <span class="highlight-keyword">break</span>;
                <span class="highlight-keyword">case</span> ArcSignatureValidationResult.Fail:
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine (<span class="highlight-literal">"FAIL"</span>);
                    Console.ResetColor ();
                    <span class="highlight-keyword">break</span>;
                }
            }
        }

        <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Help ()
        {
            Console.WriteLine (<span class="highlight-literal">"Usage is: ArcVerifier [options] [messages]"</span>);
            Console.WriteLine ();
            Console.WriteLine (<span class="highlight-literal">"Options:"</span>);
            Console.WriteLine (<span class="highlight-literal">"  --help               This help menu."</span>);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAABBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_MimeKit_Cryptography_ArcValidationResult.htm">ArcValidationResult Class</a></div><div class="seeAlsoStyle"><a href="N_MimeKit_Cryptography.htm">MimeKit.Cryptography Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><!-- Global site tag (gtag.js) - Google Analytics -->
<script src="https://www.googletagmanager.com/gtag/js?id=UA-63841238-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-63841238-1');
</script><p><a href="https://github.com/jstedfast" target="_blank" rel="noopener noreferrer">Copyright © 2013-2021 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit%20Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>