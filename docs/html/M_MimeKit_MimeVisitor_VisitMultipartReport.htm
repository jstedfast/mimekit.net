<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>MimeVisitor.VisitMultipartReport Method</title><meta name="Title" content="VisitMultipartReport Method" /><meta name="Microsoft.Help.Id" content="M:MimeKit.MimeVisitor.VisitMultipartReport(MimeKit.MultipartReport)" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="MimeVisitor.VisitMultipartReport method" /><meta name="System.Keywords" content="VisitMultipartReport method" /><meta name="Microsoft.Help.F1" content="MimeKit.MimeVisitor.VisitMultipartReport" /><meta name="Microsoft.Help.F1" content="MimeVisitor.VisitMultipartReport" /><meta name="Microsoft.Help.F1" content="VisitMultipartReport" /><meta name="container" content="MimeKit" /><meta name="file" content="M_MimeKit_MimeVisitor_VisitMultipartReport" /><meta name="guid" content="M_MimeKit_MimeVisitor_VisitMultipartReport" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Description" content="Visit the multipart/report MIME entity." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_MimeKit.htm" title="MimeKit" tocid="N_MimeKit">MimeKit</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_MimeKit_MimeVisitor.htm" title="MimeVisitor Class" tocid="T_MimeKit_MimeVisitor">MimeVisitor Class</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_MimeKit_MimeVisitor.htm" title="MimeVisitor Methods" tocid="Methods_T_MimeKit_MimeVisitor">MimeVisitor Methods</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Overload_MimeKit_MimeVisitor_Visit.htm" title="Visit Method" tocid="Overload_MimeKit_MimeVisitor_Visit">Visit Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitApplicationPgpEncrypted.htm" title="VisitApplicationPgpEncrypted Method" tocid="M_MimeKit_MimeVisitor_VisitApplicationPgpEncrypted">VisitApplicationPgpEncrypted Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitApplicationPgpSignature.htm" title="VisitApplicationPgpSignature Method" tocid="M_MimeKit_MimeVisitor_VisitApplicationPgpSignature">VisitApplicationPgpSignature Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitApplicationPkcs7Mime.htm" title="VisitApplicationPkcs7Mime Method" tocid="M_MimeKit_MimeVisitor_VisitApplicationPkcs7Mime">VisitApplicationPkcs7Mime Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitApplicationPkcs7Signature.htm" title="VisitApplicationPkcs7Signature Method" tocid="M_MimeKit_MimeVisitor_VisitApplicationPkcs7Signature">VisitApplicationPkcs7Signature Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitBody.htm" title="VisitBody Method" tocid="M_MimeKit_MimeVisitor_VisitBody">VisitBody Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitChildren.htm" title="VisitChildren Method" tocid="M_MimeKit_MimeVisitor_VisitChildren">VisitChildren Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMessage.htm" title="VisitMessage Method" tocid="M_MimeKit_MimeVisitor_VisitMessage">VisitMessage Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMessageDeliveryStatus.htm" title="VisitMessageDeliveryStatus Method" tocid="M_MimeKit_MimeVisitor_VisitMessageDeliveryStatus">VisitMessageDeliveryStatus Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMessageDispositionNotification.htm" title="VisitMessageDispositionNotification Method" tocid="M_MimeKit_MimeVisitor_VisitMessageDispositionNotification">VisitMessageDispositionNotification Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMessageFeedbackReport.htm" title="VisitMessageFeedbackReport Method" tocid="M_MimeKit_MimeVisitor_VisitMessageFeedbackReport">VisitMessageFeedbackReport Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMessagePart.htm" title="VisitMessagePart Method" tocid="M_MimeKit_MimeVisitor_VisitMessagePart">VisitMessagePart Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMessagePartial.htm" title="VisitMessagePartial Method" tocid="M_MimeKit_MimeVisitor_VisitMessagePartial">VisitMessagePartial Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMimeEntity.htm" title="VisitMimeEntity Method" tocid="M_MimeKit_MimeVisitor_VisitMimeEntity">VisitMimeEntity Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMimeMessage.htm" title="VisitMimeMessage Method" tocid="M_MimeKit_MimeVisitor_VisitMimeMessage">VisitMimeMessage Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMimePart.htm" title="VisitMimePart Method" tocid="M_MimeKit_MimeVisitor_VisitMimePart">VisitMimePart Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMultipart.htm" title="VisitMultipart Method" tocid="M_MimeKit_MimeVisitor_VisitMultipart">VisitMultipart Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMultipartAlternative.htm" title="VisitMultipartAlternative Method" tocid="M_MimeKit_MimeVisitor_VisitMultipartAlternative">VisitMultipartAlternative Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMultipartEncrypted.htm" title="VisitMultipartEncrypted Method" tocid="M_MimeKit_MimeVisitor_VisitMultipartEncrypted">VisitMultipartEncrypted Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMultipartRelated.htm" title="VisitMultipartRelated Method" tocid="M_MimeKit_MimeVisitor_VisitMultipartRelated">VisitMultipartRelated Method</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMultipartReport.htm" title="VisitMultipartReport Method" tocid="M_MimeKit_MimeVisitor_VisitMultipartReport">VisitMultipartReport Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitMultipartSigned.htm" title="VisitMultipartSigned Method" tocid="M_MimeKit_MimeVisitor_VisitMultipartSigned">VisitMultipartSigned Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitTextPart.htm" title="VisitTextPart Method" tocid="M_MimeKit_MimeVisitor_VisitTextPart">VisitTextPart Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitTextRfc822Headers.htm" title="VisitTextRfc822Headers Method" tocid="M_MimeKit_MimeVisitor_VisitTextRfc822Headers">VisitTextRfc822Headers Method</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_MimeVisitor_VisitTnefPart.htm" title="VisitTnefPart Method" tocid="M_MimeKit_MimeVisitor_VisitTnefPart">VisitTnefPart Method</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>Mime<wbr />Visitor<span id="LST877C084C_0" data-languageSpecificText="cpp=::|nu=."></span>Visit<wbr />Multipart<wbr />Report Method</h1></td></tr></table><div class="summary">
            Visit the multipart/report MIME entity.
            </div><br /><strong>Namespace:</strong> <a href="N_MimeKit.htm">MimeKit</a><br /><strong>Assembly:</strong> MimeKit (in MimeKit.dll) Version: 4.10.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">protected</span> <span class="keyword">virtual</span> <span class="keyword">void</span> <span class="identifier">VisitMultipartReport</span>(
	<span class="identifier">MultipartReport</span> <span class="parameter">report</span>
)</pre></div></div></div><h4>Parameters</h4><dl><dt class="has-text-weight-normal"><span class="parameter">report</span>  <a href="T_MimeKit_MultipartReport.htm">MultipartReport</a></dt><dd>The multipart/report MIME entity.</dd></dl></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection">
            Visits the multipart/report MIME entity.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCC')" onkeypress="SectionExpandCollapse_CheckKey('IDCC', event)" tabindex="0"><img id="IDCCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDCCSection" class="collapsibleSection"><div id="IDACC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDACC_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDACC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDACC');return false;" title="Copy">Copy</a></div></div><div id="IDACC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Visits a MimeMessage and generates HTML suitable to be rendered by a browser control.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">class</span> HtmlPreviewVisitor : MimeVisitor
{
    List&lt;MultipartRelated&gt; stack = <span class="highlight-keyword">new</span> List&lt;MultipartRelated&gt; ();
    List&lt;MimeEntity&gt; attachments = <span class="highlight-keyword">new</span> List&lt;MimeEntity&gt; ();
    <span class="highlight-keyword">string</span> body;

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Creates a new HtmlPreviewVisitor.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> HtmlPreviewVisitor ()
    {
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// The list of attachments that were in the MimeMessage.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> IList&lt;MimeEntity&gt; Attachments {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> attachments; }
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// The HTML string that can be set on the BrowserControl.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> HtmlBody {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> body ?? <span class="highlight-keyword">string</span>.Empty; }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartAlternative (MultipartAlternative alternative)
    {
        <span class="highlight-comment">// walk the multipart/alternative children backwards from greatest level of faithfulness to the least faithful</span>
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = alternative.Count - <span class="highlight-number">1</span>; i &gt;= <span class="highlight-number">0</span> &amp;&amp; body == <span class="highlight-keyword">null</span>; i--)
            alternative[i].Accept (<span class="highlight-keyword">this</span>);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartRelated (MultipartRelated related)
    {
        <span class="highlight-keyword">var</span> root = related.Root;

        <span class="highlight-comment">// push this multipart/related onto our stack</span>
        stack.Add (related);

        <span class="highlight-comment">// visit the root document</span>
        root.Accept (<span class="highlight-keyword">this</span>);

        <span class="highlight-comment">// pop this multipart/related off our stack</span>
        stack.RemoveAt (stack.Count - <span class="highlight-number">1</span>);
    }

    <span class="highlight-comment">// look up the image based on the img src url within our multipart/related stack</span>
    <span class="highlight-keyword">bool</span> TryGetImage (<span class="highlight-keyword">string</span> url, <span class="highlight-keyword">out</span> MimePart image)
    {
        UriKind kind;
        <span class="highlight-keyword">int</span> index;
        Uri uri;

        <span class="highlight-keyword">if</span> (Uri.IsWellFormedUriString (url, UriKind.Absolute))
            kind = UriKind.Absolute;
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (Uri.IsWellFormedUriString (url, UriKind.Relative))
            kind = UriKind.Relative;
        <span class="highlight-keyword">else</span>
            kind = UriKind.RelativeOrAbsolute;

        <span class="highlight-keyword">try</span> {
            uri = <span class="highlight-keyword">new</span> Uri (url, kind);
        } <span class="highlight-keyword">catch</span> {
            image = <span class="highlight-keyword">null</span>;
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
        }

        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = stack.Count - <span class="highlight-number">1</span>; i &gt;= <span class="highlight-number">0</span>; i--) {
            <span class="highlight-keyword">if</span> ((index = stack[i].IndexOf (uri)) == <span class="highlight-number">-1</span>)
                <span class="highlight-keyword">continue</span>;

            image = stack[i][index] <span class="highlight-keyword">as</span> MimePart;
            <span class="highlight-keyword">return</span> image != <span class="highlight-keyword">null</span>;
        }

        image = <span class="highlight-keyword">null</span>;

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Get a data: URI for the image attachment.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;remarks&gt;</span>
    <span class="highlight-comment">/// Encodes the image attachment into a string suitable for setting as a src= attribute value in</span>
    <span class="highlight-comment">/// an img tag.</span>
    <span class="highlight-comment">/// &lt;/remarks&gt;</span>
    <span class="highlight-comment">/// &lt;returns&gt;The data: URI.&lt;/returns&gt;</span>
    <span class="highlight-comment">/// &lt;param name="image"&gt;The image attachment.&lt;/param&gt;</span>
    <span class="highlight-keyword">string</span> GetDataUri (MimePart image)
    {
        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> memory = <span class="highlight-keyword">new</span> MemoryStream ()) {
            image.Content.DecodeTo (memory);
            <span class="highlight-keyword">var</span> buffer = memory.GetBuffer ();
            <span class="highlight-keyword">var</span> length = (<span class="highlight-keyword">int</span>) memory.Length;
            <span class="highlight-keyword">var</span> base64 = Convert.ToBase64String (buffer, <span class="highlight-number">0</span>, length);

            <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"data:{0};base64,{1}"</span>, image.ContentType.MimeType, base64);
        }
    }

    <span class="highlight-comment">// Replaces &lt;img src=...&gt; urls that refer to images embedded within the message with</span>
    <span class="highlight-comment">// "file://" urls that the browser control will actually be able to load.</span>
    <span class="highlight-keyword">void</span> HtmlTagCallback (HtmlTagContext ctx, HtmlWriter htmlWriter)
    {
        <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Meta &amp;&amp; !ctx.IsEndTag) {
            <span class="highlight-keyword">bool</span> isContentType = <span class="highlight-keyword">false</span>;

            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// replace charsets with "utf-8" since our output will be in utf-8 (and not whatever the original charset was)</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.Charset) {
                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (<span class="highlight-literal">"utf-8"</span>);
                } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (isContentType &amp;&amp; attribute.Id == HtmlAttributeId.Content) {
                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (<span class="highlight-literal">"text/html; charset=utf-8"</span>);
                } <span class="highlight-keyword">else</span> {
                    <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.HttpEquiv &amp;&amp; attribute.Value != <span class="highlight-keyword">null</span>
                        &amp;&amp; attribute.Value.Equals (<span class="highlight-literal">"Content-Type"</span>, StringComparison.OrdinalIgnoreCase))
                        isContentType = <span class="highlight-keyword">true</span>;

                    htmlWriter.WriteAttribute (attribute);
                }
            }
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Image &amp;&amp; !ctx.IsEndTag &amp;&amp; stack.Count &gt; <span class="highlight-number">0</span>) {
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// replace the src attribute with a "data:" URL</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.Src) {
                    <span class="highlight-keyword">if</span> (!TryGetImage (attribute.Value, <span class="highlight-keyword">out</span> <span class="highlight-keyword">var</span> image)) {
                        htmlWriter.WriteAttribute (attribute);
                        <span class="highlight-keyword">continue</span>;
                    }

                    <span class="highlight-keyword">var</span> dataUri = GetDataUri (image);

                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (dataUri);
                } <span class="highlight-keyword">else</span> {
                    htmlWriter.WriteAttribute (attribute);
                }
            }
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Body &amp;&amp; !ctx.IsEndTag) {
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// add and/or replace oncontextmenu="return false;"</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Name.Equals (<span class="highlight-literal">"oncontextmenu"</span>, StringComparison.OrdinalIgnoreCase))
                    <span class="highlight-keyword">continue</span>;

                htmlWriter.WriteAttribute (attribute);
            }

            htmlWriter.WriteAttribute (<span class="highlight-literal">"oncontextmenu"</span>, <span class="highlight-literal">"return false;"</span>);
        } <span class="highlight-keyword">else</span> {
            <span class="highlight-comment">// pass the tag through to the output</span>
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">true</span>);
        }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTextPart (TextPart entity)
    {
        TextConverter converter;

        <span class="highlight-keyword">if</span> (body != <span class="highlight-keyword">null</span>) {
            <span class="highlight-comment">// since we've already found the body, treat this as an attachment</span>
            attachments.Add (entity);
            <span class="highlight-keyword">return</span>;
        }

        <span class="highlight-keyword">if</span> (entity.IsHtml) {
            converter = <span class="highlight-keyword">new</span> HtmlToHtml {
                HtmlTagCallback = HtmlTagCallback
            };
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (entity.IsFlowed) {
            <span class="highlight-keyword">var</span> flowed = <span class="highlight-keyword">new</span> FlowedToHtml ();
            <span class="highlight-keyword">string</span> delsp;

            <span class="highlight-keyword">if</span> (entity.ContentType.Parameters.TryGetValue (<span class="highlight-literal">"delsp"</span>, <span class="highlight-keyword">out</span> delsp))
                flowed.DeleteSpace = delsp.Equals (<span class="highlight-literal">"yes"</span>, StringComparison.OrdinalIgnoreCase);

            converter = flowed;
        } <span class="highlight-keyword">else</span> {
            converter = <span class="highlight-keyword">new</span> TextToHtml ();
        }

        body = converter.Convert (entity.Text);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTnefPart (TnefPart entity)
    {
        <span class="highlight-comment">// extract any attachments in the MS-TNEF part</span>
        attachments.AddRange (entity.ExtractAttachments ());
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMessagePart (MessagePart entity)
    {
        <span class="highlight-comment">// treat message/rfc822 parts as attachments</span>
        attachments.Add (entity);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMimePart (MimePart entity)
    {
        <span class="highlight-comment">// realistically, if we've gotten this far, then we can treat this as an attachment</span>
        <span class="highlight-comment">// even if the IsAttachment property is false.</span>
        attachments.Add (entity);
    }
}</pre></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="T_MimeKit_MimeVisitor.htm">MimeVisitor Class</a></div><div><a href="N_MimeKit.htm">MimeKit Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter"><!-- Global site tag (gtag.js) - Google Analytics -->
<script src="https://www.googletagmanager.com/gtag/js?id=UA-63841238-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-63841238-1');
</script><p><a href="https://github.com/jstedfast" target="_blank" rel="noopener noreferrer">Copyright © 2013-2025 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit%20Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>