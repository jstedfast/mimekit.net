<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>Working with S/MIME</title><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Id" content="Working-With-SMime" /><meta name="Description" content="Before you can begin using MimeKit's S/MIME support, you will need to decide which database to use for certificate storage." /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="BrandingAware" content="true" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="Getting-Started.htm" title="Getting Started" tocid="Getting-Started">Getting Started</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Creating-Messages.htm" title="Creating messages" tocid="Creating-Messages">Creating messages</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Parsing-Messages.htm" title="Parsing messages" tocid="Parsing-Messages">Parsing messages</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Working-With-Messages.htm" title="Working with messages" tocid="Working-With-Messages">Working with messages</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="Working-With-OpenPGP.htm" title="Working with OpenPGP" tocid="Working-With-OpenPGP">Working with OpenPGP</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="Working-With-SMime.htm" title="Working with S/MIME" tocid="Working-With-SMime">Working with S/MIME</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>Working with S/MIME</h1></td></tr></table><span class="introStyle"></span> <div class="introduction"><p>This topic contains the following sections:</p><ul class="autoOutline"><li class="outlineSectionEntry"><a href="#CreatingYourOwnSMimeContext">Creating your own S/MIME Context</a></li><li class="outlineSectionEntry"><a href="#Encrypt">Encrypting Messages with S/MIME</a></li><li class="outlineSectionEntry"><a href="#Decrypt">Decrypting S/MIME Messages</a></li><li class="outlineSectionEntry"><a href="#Sign">Digitally Signing Messages using S/MIME</a></li><li class="outlineSectionEntry"><a href="#Verify">Verifying S/MIME Digital Signatures</a></li><li class="outlineSectionEntry"><a href="#seeAlsoSection">See Also</a></li></ul></div><div class="collapsibleAreaRegion" id="CreatingYourOwnSMimeContext"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Creating your own S/MIME Context</span></div><div id="ID1RBSection" class="collapsibleSection"><p>
          Before you can begin using MimeKit's S/MIME support, you will need to decide which
          database to use for certificate storage.
        </p><p>
          If you are targetting any of the <strong>Xamarin</strong> platforms
          (or Linux), you won't need to do anything (although you certainly can if you want to)
          because, by default, MimeKit will automatically use the
          <strong>Mono.Data.Sqlite</strong> binding to
          <a href="https://www.sqlite.org/" target="_blank">SQLite</a>.
        </p><p>
          If you are, however, on any of the <strong>Windows</strong> platforms,
          you'll need to pick a <a href="http://msdn2.microsoft.com/en-us/library/ax3wd0k9" target="_blank">System.Data</a>
          provider such as
          <a href="https://www.nuget.org/packages/System.Data.SQLite" target="_blank">System.Data.SQLite</a>. Once you've made your choice and installed it (via NuGet or however),
          you'll need to implement your own
          <a href="T_MimeKit_Cryptography_SecureMimeContext.htm">SecureMimeContext</a>
          subclass. Luckily, it's very simple to do. Assuming you've chosen
          <strong>System.Data.SQLite</strong>, here's how you'd implement your own
          <a href="T_MimeKit_Cryptography_SecureMimeContext.htm">SecureMimeContext</a>
          class:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EADAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> MySecureMimeContext : DefaultSecureMimeContext
{
    <span class="highlight-keyword">public</span> MySecureMimeContext ()
        : <span class="highlight-keyword">base</span> (OpenDatabase (<span class="highlight-literal">"C:\\wherever\\certdb.sqlite"</span>))
    {
    }

    <span class="highlight-keyword">static</span> IX509CertificateDatabase OpenDatabase (<span class="highlight-keyword">string</span> fileName)
    {
        <span class="highlight-keyword">var</span> builder = <span class="highlight-keyword">new</span> SQLiteConnectionStringBuilder ();
        builder.DateTimeFormat = SQLiteDateFormats.Ticks;
        builder.DataSource = fileName;

        <span class="highlight-keyword">if</span> (!File.Exists (fileName))
            SQLiteConnection.CreateFile (fileName);

        <span class="highlight-keyword">var</span> sqlite = <span class="highlight-keyword">new</span> SQLiteConnection (builder.ConnectionString);
        sqlite.Open ();

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">new</span> SqliteCertificateDatabase (sqlite, <span class="highlight-literal">"password"</span>);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADAFAAA");</script><p>
          To register your class, you can use the following code snippet:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAFAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAFAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABAFAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAFAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// Note: by registering our custom context it becomes the default S/MIME context</span>
<span class="highlight-comment">// instantiated by MimeKit when methods such as Encrypt(), Decrypt(), Sign(), and</span>
<span class="highlight-comment">// Verify() are used without an expliit context.</span>
CryptographyContext.Register (<span class="highlight-keyword">typeof</span> (MySecureMimeContext));</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAFAAA");</script><p>
          Now you are ready to encrypt, decrypt, sign and verify messages using S/MIME!
        </p></div><div class="collapsibleAreaRegion" id="Encrypt"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Encrypting Messages with S/MIME</span></div><div id="ID2RBSection" class="collapsibleSection"><p>
          Instead of using a <span class="literal">multipart/encrypted</span> MIME part to encapsulate
          encrypted content like OpenPGP, S/MIME uses <span class="literal">application/pkcs7-mime</span>.
          To encrypt any <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a>,
          simply use the
          <a href="Overload_MimeKit_Cryptography_ApplicationPkcs7Mime_Encrypt.htm">ApplicationPkcs7Mime<span id="LST70E1E81D_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST70E1E81D_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Encrypt</a>
          method:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABAEAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABAEAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABAEAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABAEAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Encrypt (MimeMessage message)
{
    <span class="highlight-comment">// encrypt our message body using our custom S/MIME cryptography context</span>
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MySecureMimeContext ()) {
        <span class="highlight-comment">// Note: this assumes that each of the recipients has an S/MIME certificate</span>
        <span class="highlight-comment">// with an X.509 Subject Email identifier that matches their email address.</span>
        <span class="highlight-comment">// </span>
        <span class="highlight-comment">// If this is not the case, you can use SecureMailboxAddresses instead of</span>
        <span class="highlight-comment">// normal MailboxAddresses which would allow you to specify the fingerprint</span>
        <span class="highlight-comment">// of their certificates. You could also choose to use one of the Encrypt()</span>
        <span class="highlight-comment">// overloads that take a list of CmsRecipients, instead.</span>
        message.Body = ApplicationPkcs7Mime.Encrypt (ctx, message.To.Mailboxes, message.Body);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABAEAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
            When you know that you will be encrypting a message, it may be a good idea to use
            a <a href="T_MimeKit_Cryptography_SecureMailboxAddress.htm">SecureMailboxAddress</a>
            instead of a <a href="T_MimeKit_MailboxAddress.htm">MailboxAddress</a>
            for each of the recipients, allowing you to specify the unique fingerprint of each
            recipient's X.509 certificate.
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="Decrypt"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Decrypting S/MIME Messages</span></div><div id="ID3RBSection" class="collapsibleSection"><p>
          As mentioned earlier, S/MIME uses an <span class="literal">application/pkcs7-mime</span> part with
          an <span class="literal">smime-type</span> parameter with a value of <span class="literal">enveloped-data</span>
          to encapsulate the encrypted content.
        </p><p>
          The first thing you must do is find the
          <a href="T_MimeKit_Cryptography_ApplicationPkcs7Mime.htm">ApplicationPkcs7Mime</a>
          part (see the section on <span class="nolink">[workingwithmessages]</span>).
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAADAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAADAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAADAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAADAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> MimeEntity Decrypt (MimeMessage message)
{
    <span class="highlight-keyword">var</span> pkcs7 = message.Body <span class="highlight-keyword">as</span> ApplicationPkcs7Mime;

    <span class="highlight-keyword">if</span> (pkcs7 != <span class="highlight-keyword">null</span> &amp;&amp; pkcs7.SecureMimeType == SecureMimeType.EnvelopedData) {
        <span class="highlight-comment">// the top-level MIME part of the message is encrypted using S/MIME</span>
        <span class="highlight-keyword">return</span> pkcs7.Decrypt ();
    } <span class="highlight-keyword">else</span> {
        <span class="highlight-comment">// the top-level MIME part is not encrypted</span>
        <span class="highlight-keyword">return</span> message.Body;
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAADAAA");</script></div><div class="collapsibleAreaRegion" id="Sign"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Digitally Signing Messages using S/MIME</span></div><div id="ID4RBSection" class="collapsibleSection"><p>
          S/MIME can use either a <span class="literal">multipart/signed</span> MIME part or a
          <span class="literal">application/pkcs7-mime</span> MIME part for signed data.
        </p><p>
          To digitally sign a <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a>
          using a <span class="literal">multipart/signed</span> MIME part, it works exactly the same
          as it does for <span class="nolink">OpenPGP</span> using
          <a href="Overload_MimeKit_Cryptography_MultipartSigned_Create.htm">MultipartSigned<span id="LST70E1E81D_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST70E1E81D_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Create</a></p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAFACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAFACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAFACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAFACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> MultipartSign (MimeMessage message)
{
    <span class="highlight-comment">// digitally sign our message body using our custom S/MIME cryptography context</span>
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MySecureMimeContext ()) {
        <span class="highlight-comment">// Note: this assumes that the Sender address has an S/MIME signing certificate</span>
        <span class="highlight-comment">// and private key with an X.509 Subject Email identifier that matches the</span>
        <span class="highlight-comment">// sender's email address.</span>
        <span class="highlight-keyword">var</span> sender = message.From.Mailboxes.FirstOrDefault ();

        message.Body = MultipartSigned.Create (ctx, sender, DigestAlgorithm.Sha1, message.Body);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAFACAAA");</script><p>
          You can also do your own certificate lookups instead of relying on email addresses
          to match up with the user's certificate.
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EADACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EADACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EADACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EADACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> MultipartSign (MimeMessage message, X509Certificate2 certificate)
{
    <span class="highlight-comment">// digitally sign our message body using our custom S/MIME cryptography context</span>
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MySecureMimeContext ()) {
        <span class="highlight-keyword">var</span> signer = <span class="highlight-keyword">new</span> CmsSigner (certificate) {
            DigestAlgorithm = DigestAlgorithm.Sha1
        };

        message.Body = MultipartSigned.Create (ctx, signer, message.Body);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EADACAAA");</script><p>
          You can also choose to digitially sign a
          <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a> using the
          <span class="literal">application/pkcs7-mime</span> format using
          <a href="Overload_MimeKit_Cryptography_ApplicationPkcs7Mime_Sign.htm">ApplicationPkcs7Mime<span id="LST70E1E81D_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST70E1E81D_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Sign</a></p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EABACAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EABACAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EABACAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EABACAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> Pkcs7Sign (MimeMessage message)
{
    <span class="highlight-comment">// digitally sign our message body using our custom S/MIME cryptography context</span>
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MySecureMimeContext ()) {
        <span class="highlight-comment">// Note: this assumes that the Sender address has an S/MIME signing certificate</span>
        <span class="highlight-comment">// and private key with an X.509 Subject Email identifier that matches the</span>
        <span class="highlight-comment">// sender's email address.</span>
        <span class="highlight-keyword">var</span> sender = message.From.Mailboxes.FirstOrDefault ();

        message.Body = ApplicationPkcs7Mime.Sign (ctx, sender, DigestAlgorithm.Sha1, message.Body);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EABACAAA");</script><div class="alert"><table><tr><th><img src="../icons/AlertNote.png" alt="Tip" /> Tip</th></tr><tr><td><p>
            When you know that you will be signing a message, it may be a good idea to use
            a <a href="T_MimeKit_Cryptography_SecureMailboxAddress.htm">SecureMailboxAddress</a>
            instead of a <a href="T_MimeKit_MailboxAddress.htm">MailboxAddress</a>
            for the sender, allowing you to specify the unique fingerprint of the sender's
            X.509 certificate.
          </p></td></tr></table></div></div><div class="collapsibleAreaRegion" id="Verify"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Verifying S/MIME Digital Signatures</span></div><div id="ID5RBSection" class="collapsibleSection"><p>
          As mentioned earlier, S/MIME typically uses a <span class="literal">multipart/signed</span>
          part to contain the signed content and the detached signature data.
        </p><p>
          A <span class="literal">multipart/signed</span> contains exactly 2 parts: the first
          <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a> is the signed
          content while the second
          <a href="T_MimeKit_MimeEntity.htm">MimeEntity</a> is the
          detached signature and, by default, will be an
          <a href="T_MimeKit_Cryptography_ApplicationPkcs7Signature.htm">ApplicationPkcs7Signature</a>
          part.
        </p><p>
          Because the <span class="literal">multipart/signed</span> part may have been signed by
          multiple signers, it is important to verify each of the digital signatures
          (one for each signer) that are returned by the
          <a href="Overload_MimeKit_Cryptography_MultipartSigned_Verify.htm">Verify</a>
          method:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> VerifyMultipartSigned (MimeMessage message)
{
    <span class="highlight-keyword">if</span> (message.Body <span class="highlight-keyword">is</span> MultipartSigned) {
        <span class="highlight-keyword">var</span> signed = (MultipartSigned) message.Body;

        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> signature <span class="highlight-keyword">in</span> signed.Verify ()) {
            <span class="highlight-keyword">try</span> {
                <span class="highlight-keyword">bool</span> valid = signature.Verify ();

                <span class="highlight-comment">// If valid is true, then it signifies that the signed content</span>
                <span class="highlight-comment">// has not been modified since this particular signer signed the</span>
                <span class="highlight-comment">// content.</span>
                <span class="highlight-comment">// </span>
                <span class="highlight-comment">// However, if it is false, then it indicates that the signed</span>
                <span class="highlight-comment">// content has been modified.</span>
            } <span class="highlight-keyword">catch</span> (DigitalSignatureVerifyException) {
                <span class="highlight-comment">// There was an error verifying the signature.</span>
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACABAAA");</script><p>
          It should be noted, however, that while most S/MIME clients will use the preferred
          <span class="literal">multipart/signed</span> approach, it is possible that you may encounter an
          <span class="literal">application/pkcs7-mime</span> part with an <span class="literal">smime-type</span>
          parameter set to <span class="literal">signed-data</span>. Luckily, MimeKit can handle this
          format as well:
        </p><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAABAAA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAABAAA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAABAAA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAABAAA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">void</span> VerifyPkcs7 (MimeMessage message)
{
    <span class="highlight-keyword">var</span> pkcs7 = message.Body <span class="highlight-keyword">as</span> ApplicationPkcs7Mime;

    <span class="highlight-keyword">if</span> (pkcs7 != <span class="highlight-keyword">null</span> &amp;&amp; pkcs7.SecureMimeType == SecureMimeType.SignedData) {
        <span class="highlight-comment">// extract the original content and get a list of signatures</span>
        MimeEntity original;

        <span class="highlight-comment">// Note: if you are rendering the message, you'll want to render the</span>
        <span class="highlight-comment">// original mime part rather than the application/pkcs7-mime part.</span>
        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> signature <span class="highlight-keyword">in</span> pkcs7.Verify (<span class="highlight-keyword">out</span> original)) {
            <span class="highlight-keyword">try</span> {
                <span class="highlight-keyword">bool</span> valid = signature.Verify ();

                <span class="highlight-comment">// If valid is true, then it signifies that the signed content</span>
                <span class="highlight-comment">// has not been modified since this particular signer signed the</span>
                <span class="highlight-comment">// content.</span>
                <span class="highlight-comment">// </span>
                <span class="highlight-comment">// However, if it is false, then it indicates that the signed</span>
                <span class="highlight-comment">// content has been modified.</span>
            } <span class="highlight-keyword">catch</span> (DigitalSignatureVerifyException) {
                <span class="highlight-comment">// There was an error verifying the signature.</span>
            }
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAABAAA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID6RBSection" class="collapsibleSection"><h4 class="subHeading">Other Resources</h4><div class="seeAlsoStyle"><a href="Working-With-Messages.htm">Working with messages</a></div><div class="seeAlsoStyle"><a href="Working-With-OpenPGP.htm">Working with OpenPGP</a></div></div></div></div><div id="pageFooter" class="pageFooter"><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','//www.google-analytics.com/analytics.js','ga'); ga('create', 'UA-63841238-1', 'auto'); ga('send', 'pageview');</script><p><a href="https://github.com/jstedfast" target="_blank">Copyright © 2013-2017 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script></div></body></html>