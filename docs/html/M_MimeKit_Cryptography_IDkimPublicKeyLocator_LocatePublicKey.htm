<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>IDkimPublicKeyLocator.LocatePublicKey Method </title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="LocatePublicKey method" /><meta name="System.Keywords" content="IDkimPublicKeyLocator.LocatePublicKey method" /><meta name="Microsoft.Help.F1" content="MimeKit.Cryptography.IDkimPublicKeyLocator.LocatePublicKey" /><meta name="Microsoft.Help.Id" content="M:MimeKit.Cryptography.IDkimPublicKeyLocator.LocatePublicKey(System.String,System.String,System.String,System.Threading.CancellationToken)" /><meta name="Description" content="Locate and retrieves the public key for the given domain and selector." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="MimeKit.Cryptography" /><meta name="file" content="M_MimeKit_Cryptography_IDkimPublicKeyLocator_LocatePublicKey" /><meta name="guid" content="M_MimeKit_Cryptography_IDkimPublicKeyLocator_LocatePublicKey" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-1.11.0.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html\Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_MimeKit_Cryptography.htm" title="MimeKit.Cryptography" tocid="N_MimeKit_Cryptography">MimeKit.Cryptography</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_MimeKit_Cryptography_IDkimPublicKeyLocator.htm" title="IDkimPublicKeyLocator Interface" tocid="T_MimeKit_Cryptography_IDkimPublicKeyLocator">IDkimPublicKeyLocator Interface</a></div><div class="toclevel1" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_MimeKit_Cryptography_IDkimPublicKeyLocator.htm" title="IDkimPublicKeyLocator Methods" tocid="Methods_T_MimeKit_Cryptography_IDkimPublicKeyLocator">IDkimPublicKeyLocator Methods</a></div><div class="toclevel2 current" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_Cryptography_IDkimPublicKeyLocator_LocatePublicKey.htm" title="LocatePublicKey Method " tocid="M_MimeKit_Cryptography_IDkimPublicKeyLocator_LocatePublicKey">LocatePublicKey Method </a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_Cryptography_IDkimPublicKeyLocator_LocatePublicKeyAsync.htm" title="LocatePublicKeyAsync Method " tocid="M_MimeKit_Cryptography_IDkimPublicKeyLocator_LocatePublicKeyAsync">LocatePublicKeyAsync Method </a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>IDkimPublicKeyLocator<span id="LST754BA04B_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST754BA04B_0?cpp=::|nu=.");</script>LocatePublicKey Method </h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            Locate and retrieves the public key for the given domain and selector.
            </div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_MimeKit_Cryptography.htm">MimeKit.Cryptography</a><br />
    <strong>Assembly:</strong>
   MimeKit (in MimeKit.dll) Version: 2.1.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID1RB')" onkeypress="SectionExpandCollapse_CheckKey('ID1RB', event)" tabindex="0"><img id="ID1RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID1RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EACA');return false;" title="Copy">Copy</a></div></div><div id="ID0EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="identifier">AsymmetricKeyParameter</span> <span class="identifier">LocatePublicKey</span>(
	<span class="identifier">string</span> <span class="parameter">methods</span>,
	<span class="identifier">string</span> <span class="parameter">domain</span>,
	<span class="identifier">string</span> <span class="parameter">selector</span>,
	<span class="identifier">CancellationToken</span> <span class="parameter">cancellationToken</span> = <span class="keyword">null</span>
)</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EACA");</script><h4 class="subHeading">Parameters</h4><dl><dt><span class="parameter">methods</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">System<span id="LST754BA04B_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST754BA04B_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br />A colon-separated list of query methods used to retrieve the public key. The default is <span class="code">"dns/txt"</span>.</dd><dt><span class="parameter">domain</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">System<span id="LST754BA04B_2"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST754BA04B_2?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br />The domain.</dd><dt><span class="parameter">selector</span></dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">System<span id="LST754BA04B_3"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST754BA04B_3?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>String</a><br />The selector.</dd><dt><span class="parameter">cancellationToken</span> (Optional)</dt><dd>Type: <a href="http://msdn2.microsoft.com/en-us/library/dd384802" target="_blank">System.Threading<span id="LST754BA04B_4"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST754BA04B_4?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>CancellationToken</a><br />The cancellation token.</dd></dl><h4 class="subHeading">Return Value</h4>Type: <span class="nolink">AsymmetricKeyParameter</span><br />The public key.</div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID2RBSection" class="collapsibleSection"><p>Locates and retrieves the public key for the given domain and selector.</p></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID3RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID0EAAGBA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID0EAAGBA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID0EAAGBA');return false;" title="Copy">Copy</a></div></div><div id="ID0EAAGBA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> System;
<span class="highlight-keyword">using</span> System.IO;
<span class="highlight-keyword">using</span> System.Text;
<span class="highlight-keyword">using</span> System.Threading;
<span class="highlight-keyword">using</span> System.Collections.Generic;

<span class="highlight-keyword">using</span> Heijden.DNS;

<span class="highlight-keyword">using</span> Org.BouncyCastle.Crypto;
<span class="highlight-keyword">using</span> Org.BouncyCastle.OpenSsl;

<span class="highlight-keyword">using</span> MimeKit;
<span class="highlight-keyword">using</span> MimeKit.Cryptography;

<span class="highlight-keyword">namespace</span> DkimVerifier
{
    <span class="highlight-keyword">class</span> DkimPublicKeyLocator : IDkimPublicKeyLocator
    {
        <span class="highlight-keyword">readonly</span> Dictionary&lt;<span class="highlight-keyword">string</span>, AsymmetricKeyParameter&gt; cache;
        <span class="highlight-keyword">readonly</span> Resolver resolver;

        <span class="highlight-keyword">public</span> DkimPublicKeyLocator ()
        {
            cache = <span class="highlight-keyword">new</span> Dictionary&lt;<span class="highlight-keyword">string</span>, AsymmetricKeyParameter&gt; ();

            resolver = <span class="highlight-keyword">new</span> Resolver (<span class="highlight-literal">"8.8.8.8"</span>) {
                TransportType = TransportType.Udp,
                UseCache = <span class="highlight-keyword">true</span>,
                Retries = <span class="highlight-number">3</span>
            };
        }

        AsymmetricKeyParameter DnsLookup (<span class="highlight-keyword">string</span> domain, <span class="highlight-keyword">string</span> selector, CancellationToken cancellationToken)
        {
            <span class="highlight-keyword">var</span> query = selector + <span class="highlight-literal">"._domainkey."</span> + domain;
            AsymmetricKeyParameter pubkey;

            <span class="highlight-comment">// checked if we've already fetched this key</span>
            <span class="highlight-keyword">if</span> (cache.TryGetValue (query, <span class="highlight-keyword">out</span> pubkey))
                <span class="highlight-keyword">return</span> pubkey;

            <span class="highlight-comment">// make a DNS query</span>
            <span class="highlight-keyword">var</span> response = resolver.Query (query, QType.TXT);
            <span class="highlight-keyword">var</span> builder = <span class="highlight-keyword">new</span> StringBuilder ();

            <span class="highlight-comment">// combine the TXT records into 1 string buffer</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> record <span class="highlight-keyword">in</span> response.RecordsTXT) {
                <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> text <span class="highlight-keyword">in</span> record.TXT)
                    builder.Append (text);
            }

            <span class="highlight-keyword">var</span> txt = builder.ToString ();
            <span class="highlight-keyword">string</span> k = <span class="highlight-keyword">null</span>, p = <span class="highlight-keyword">null</span>;
            <span class="highlight-keyword">int</span> index = <span class="highlight-number">0</span>;

            <span class="highlight-comment">// parse the response (will look something like: "k=rsa; p=&lt;base64&gt;")</span>
            <span class="highlight-keyword">while</span> (index &lt; txt.Length) {
                <span class="highlight-keyword">while</span> (index &lt; txt.Length &amp;&amp; <span class="highlight-keyword">char</span>.IsWhiteSpace (txt[index]))
                    index++;

                <span class="highlight-keyword">if</span> (index == txt.Length)
                    <span class="highlight-keyword">break</span>;

                <span class="highlight-comment">// find the end of the key</span>
                <span class="highlight-keyword">int</span> startIndex = index;
                <span class="highlight-keyword">while</span> (index &lt; txt.Length &amp;&amp; txt[index] != <span class="highlight-literal">'='</span>)
                    index++;

                <span class="highlight-keyword">if</span> (index == txt.Length)
                    <span class="highlight-keyword">break</span>;

                <span class="highlight-keyword">var</span> key = txt.Substring (startIndex, index - startIndex);

                <span class="highlight-comment">// skip over the '='</span>
                index++;

                <span class="highlight-comment">// find the end of the value</span>
                startIndex = index;
                <span class="highlight-keyword">while</span> (index &lt; txt.Length &amp;&amp; txt[index] != <span class="highlight-literal">';'</span>)
                    index++;

                <span class="highlight-keyword">var</span> <span class="highlight-keyword">value</span> = txt.Substring (startIndex, index - startIndex);

                <span class="highlight-keyword">switch</span> (key) {
                <span class="highlight-keyword">case</span> <span class="highlight-literal">"k"</span>: k = <span class="highlight-keyword">value</span>; <span class="highlight-keyword">break</span>;
                <span class="highlight-keyword">case</span> <span class="highlight-literal">"p"</span>: p = <span class="highlight-keyword">value</span>; <span class="highlight-keyword">break</span>;
                }

                <span class="highlight-comment">// skip over the ';'</span>
                index++;
            }

            <span class="highlight-keyword">if</span> (k != <span class="highlight-keyword">null</span> &amp;&amp; p != <span class="highlight-keyword">null</span>) {
                <span class="highlight-keyword">var</span> data = <span class="highlight-literal">"-----BEGIN PUBLIC KEY-----\r\n"</span> + p + <span class="highlight-literal">"\r\n-----END PUBLIC KEY-----\r\n"</span>;
                <span class="highlight-keyword">var</span> rawData = Encoding.ASCII.GetBytes (data);

                <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = <span class="highlight-keyword">new</span> MemoryStream (rawData, <span class="highlight-keyword">false</span>)) {
                    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> reader = <span class="highlight-keyword">new</span> StreamReader (stream)) {
                        <span class="highlight-keyword">var</span> pem = <span class="highlight-keyword">new</span> PemReader (reader);

                        pubkey = pem.ReadObject () <span class="highlight-keyword">as</span> AsymmetricKeyParameter;

                        <span class="highlight-keyword">if</span> (pubkey != <span class="highlight-keyword">null</span>) {
                            cache.Add (query, pubkey);

                            <span class="highlight-keyword">return</span> pubkey;
                        }
                    }
                }
            }

            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> Exception (<span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"Failed to look up public key for: {0}"</span>, domain));
        }

        <span class="highlight-keyword">public</span> AsymmetricKeyParameter LocatePublicKey (<span class="highlight-keyword">string</span> methods, <span class="highlight-keyword">string</span> domain, <span class="highlight-keyword">string</span> selector, CancellationToken cancellationToken = <span class="highlight-keyword">default</span> (CancellationToken))
        {
            <span class="highlight-keyword">var</span> methodList = methods.Split (<span class="highlight-keyword">new</span> <span class="highlight-keyword">char</span>[] { <span class="highlight-literal">':'</span> }, StringSplitOptions.RemoveEmptyEntries);
            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; methodList.Length; i++) {
                <span class="highlight-keyword">if</span> (methodList[i] == <span class="highlight-literal">"dns/txt"</span>)
                    <span class="highlight-keyword">return</span> DnsLookup (domain, selector, cancellationToken);
            }

            <span class="highlight-keyword">throw</span> <span class="highlight-keyword">new</span> NotSupportedException (<span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"{0} does not include any suported lookup methods."</span>, methods));
        }
    }

    <span class="highlight-keyword">class</span> Program
    {
        <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Main(<span class="highlight-keyword">string</span>[] args)
        {
            <span class="highlight-keyword">if</span> (args.Length == <span class="highlight-number">0</span>) {
                Help ();
                <span class="highlight-keyword">return</span>;
            }

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; args.Length; i++) {
                <span class="highlight-keyword">if</span> (args[i] == <span class="highlight-literal">"--help"</span>) {
                    Help ();
                    <span class="highlight-keyword">return</span>;
                }
            }

            <span class="highlight-keyword">var</span> locator = <span class="highlight-keyword">new</span> DkimPublicKeyLocator ();

            <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; args.Length; i++) {
                <span class="highlight-keyword">if</span> (!File.Exists (args[i])) {
                    Console.Error.WriteLine (<span class="highlight-literal">"{0}: No such file."</span>, args[i]);
                    <span class="highlight-keyword">continue</span>;
                }

                Console.Write (<span class="highlight-literal">"{0} -&gt; "</span>, args[i]);

                <span class="highlight-keyword">var</span> message = MimeMessage.Load (args[i]);
                <span class="highlight-keyword">var</span> index = message.Headers.IndexOf (HeaderId.DkimSignature);

                <span class="highlight-keyword">if</span> (index == <span class="highlight-number">-1</span>) {
                    Console.WriteLine (<span class="highlight-literal">"NO SIGNATURE"</span>);
                    <span class="highlight-keyword">continue</span>;
                }

                <span class="highlight-keyword">var</span> dkim = message.Headers[index];

                <span class="highlight-keyword">if</span> (message.Verify (dkim, locator)) {
                    <span class="highlight-comment">// the DKIM-Signature header is valid!</span>
                    Console.ForegroundColor = ConsoleColor.Green;
                    Console.WriteLine (<span class="highlight-literal">"VALID"</span>);
                    Console.ResetColor ();
                } <span class="highlight-keyword">else</span> {
                    <span class="highlight-comment">// the DKIM-Signature is invalid!</span>
                    Console.ForegroundColor = ConsoleColor.Red;
                    Console.WriteLine (<span class="highlight-literal">"INVALID"</span>);
                    Console.ResetColor ();
                }
            }
        }

        <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> Help ()
        {
            Console.WriteLine (<span class="highlight-literal">"Usage is: DkimVerifier [options] [messages]"</span>);
            Console.WriteLine ();
            Console.WriteLine (<span class="highlight-literal">"Options:"</span>);
            Console.WriteLine (<span class="highlight-literal">"  --help               This help menu."</span>);
        }
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID0EAAGBA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID4RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="T_MimeKit_Cryptography_IDkimPublicKeyLocator.htm">IDkimPublicKeyLocator Interface</a></div><div class="seeAlsoStyle"><a href="N_MimeKit_Cryptography.htm">MimeKit.Cryptography Namespace</a></div><div class="seeAlsoStyle"><a href="M_MimeKit_MimeMessage_Verify_1.htm">MimeMessage<span id="LST754BA04B_5"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST754BA04B_5?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Verify(Header, IDkimPublicKeyLocator, CancellationToken)</a></div></div></div></div><div id="pageFooter" class="pageFooter"><script>(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){ (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o), m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m) })(window,document,'script','//www.google-analytics.com/analytics.js','ga'); ga('create', 'UA-63841238-1', 'auto'); ga('send', 'pageview');</script><p><a href="https://github.com/jstedfast" target="_blank">Copyright © 2013-2018 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>