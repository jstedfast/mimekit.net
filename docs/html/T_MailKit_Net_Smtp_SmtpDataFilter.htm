<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>SmtpDataFilter Class</title><meta name="Title" content="SmtpDataFilter Class" /><meta name="Microsoft.Help.Id" content="T:MailKit.Net.Smtp.SmtpDataFilter" /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="System.Keywords" content="MailKit.Net.Smtp.SmtpDataFilter class" /><meta name="System.Keywords" content="SmtpDataFilter class" /><meta name="Microsoft.Help.F1" content="MailKit.Net.Smtp.SmtpDataFilter" /><meta name="Microsoft.Help.F1" content="SmtpDataFilter" /><meta name="container" content="MailKit.Net.Smtp" /><meta name="file" content="T_MailKit_Net_Smtp_SmtpDataFilter" /><meta name="guid" content="T_MailKit_Net_Smtp_SmtpDataFilter" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Description" content="An SMTP filter designed to format a message stream for the DATA command." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_MailKit_Net_Smtp.htm" title="MailKit.Net.Smtp" tocid="N_MailKit_Net_Smtp">MailKit.Net.Smtp</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_MailKit_Net_Smtp_SmtpDataFilter.htm" title="SmtpDataFilter Class" tocid="T_MailKit_Net_Smtp_SmtpDataFilter">SmtpDataFilter Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MailKit_Net_Smtp_SmtpDataFilter__ctor.htm" title="SmtpDataFilter Constructor" tocid="M_MailKit_Net_Smtp_SmtpDataFilter__ctor">SmtpDataFilter Constructor</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/Properties_T_MailKit_Net_Smtp_SmtpDataFilter.htm" title="SmtpDataFilter Properties" tocid="Properties_T_MailKit_Net_Smtp_SmtpDataFilter">SmtpDataFilter Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_MailKit_Net_Smtp_SmtpDataFilter.htm" title="SmtpDataFilter Methods" tocid="Methods_T_MailKit_Net_Smtp_SmtpDataFilter">SmtpDataFilter Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>Smtp<wbr />Data<wbr />Filter Class</h1></td></tr></table><div class="summary">
            An SMTP filter designed to format a message stream for the DATA command.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDA')" onkeypress="SectionExpandCollapse_CheckKey('IDDA', event)" tabindex="0"><img id="IDDAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="IDDASection" class="collapsibleSection"><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST389FA93A_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Object</a><br />  <a href="T_MimeKit_IO_Filters_MimeFilterBase.htm">MimeKit.IO.Filters<span id="LST389FA93A_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>MimeFilterBase</a><br />    <span class="selflink">MailKit.Net.Smtp<span id="LST389FA93A_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>SmtpDataFilter</span><br /></div><br /><strong>Namespace:</strong> <a href="N_MailKit_Net_Smtp.htm">MailKit.Net.Smtp</a><br /><strong>Assembly:</strong> MailKit (in MailKit.dll) Version: 4.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDB')" onkeypress="SectionExpandCollapse_CheckKey('IDB', event)" tabindex="0"><img id="IDBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="IDBSection" class="collapsibleSection"><div id="IDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDAB');return false;" title="Copy">Copy</a></div></div><div id="IDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">class</span> <span class="identifier">SmtpDataFilter</span> : <span class="identifier">MimeFilterBase</span></pre></div></div></div><a id="HT_RequestExampleLink" href="https://github.com/jstedfast/MailKit/issues/new" target="_blank" rel="noopener noreferrer" class="button" title="Request an example for this topic">Request Example</a>
		<script type="text/javascript">
		var HT_requestExampleLink = document.getElementById("HT_RequestExampleLink");
				
		if(HT_requestExampleLink.href.substring(0, 4).toLowerCase() == "http")
			HT_requestExampleLink.href += "?title=";
		else
			HT_requestExampleLink.href += "?subject=MailKit%20Documentation: ";

		HT_requestExampleLink.href += "Add an Example for " + encodeURIComponent(document.title) + "&amp;body=" +
			encodeURIComponent("Please add an example for " + document.title + ".%0D%0DTODO (optional): Describe a specific " +
			"scenario you would like to see addressed.%0D%0DHelp Topic: " + window.location.href).replace(/%250D/g, "%0D");
		</script></div><p>The <span class="selflink">SmtpDataFilter</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDAEA')" onkeypress="SectionExpandCollapse_CheckKey('IDAEA', event)" tabindex="0"><img id="IDAEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="IDAEASection" class="collapsibleSection"><table id="ConstructorList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_MailKit_Net_Smtp_SmtpDataFilter__ctor.htm">SmtpDataFilter</a></td><td>
            Initializes a new instance of the <span class="selflink">SmtpDataFilter</span> class.
            </td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDMEA')" onkeypress="SectionExpandCollapse_CheckKey('IDMEA', event)" tabindex="0"><img id="IDMEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="IDMEASection" class="collapsibleSection"><table id="PropertyList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/protProperty.gif" alt="Protected property" title="Protected property" /></td><td><a href="P_MimeKit_IO_Filters_MimeFilterBase_OutputBuffer.htm">OutputBuffer</a></td><td>
            Get the output buffer.
            <br />(Inherited from <a href="T_MimeKit_IO_Filters_MimeFilterBase.htm">MimeFilterBase</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCEA')" onkeypress="SectionExpandCollapse_CheckKey('IDCEA', event)" tabindex="0"><img id="IDCEAToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="IDCEASection" class="collapsibleSection"><table id="MethodList" class="members"><tr><th class="iconColumn"> </th><th>Name</th><th>Description</th></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_MimeKit_IO_Filters_MimeFilterBase_EnsureOutputSize.htm">EnsureOutputSize</a></td><td>
            Ensure that the output buffer is greater than or equal to the specified size.
            <br />(Inherited from <a href="T_MimeKit_IO_Filters_MimeFilterBase.htm">MimeFilterBase</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.equals#System_Object_Equals_System_Object_" target="_blank" rel="noopener noreferrer">Equals</a></td><td>Determines whether the specified object is equal to the current object.<br />(Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IO_Filters_MimeFilterBase_Filter.htm">Filter(<span id="LST389FA93A_3" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST389FA93A_4" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32, Int32<span id="LST389FA93A_5" data-languageSpecificText="cpp=%"></span>, Int32<span id="LST389FA93A_6" data-languageSpecificText="cpp=%"></span>)</a></td><td>
            Filter the specified input.
            <br />(Inherited from <a href="T_MimeKit_IO_Filters_MimeFilterBase.htm">MimeFilterBase</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_MailKit_Net_Smtp_SmtpDataFilter_Filter.htm">Filter(<span id="LST389FA93A_7" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST389FA93A_8" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32, Int32<span id="LST389FA93A_9" data-languageSpecificText="cpp=%"></span>, Int32<span id="LST389FA93A_10" data-languageSpecificText="cpp=%"></span>, Boolean)</a></td><td>
            Filter the specified input.
            <br />(Overrides <a href="M_MimeKit_IO_Filters_MimeFilterBase_Filter_1.htm">MimeFilterBase<span id="LST389FA93A_11" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Filter(<span id="LST389FA93A_12" data-languageSpecificText="cpp=array&lt;"></span>Byte<span id="LST389FA93A_13" data-languageSpecificText="cpp=&gt;|cs=[]|vb=()|nu=[]|fs=[]"></span>, Int32, Int32, Int32<span id="LST389FA93A_14" data-languageSpecificText="cpp=%"></span>, Int32<span id="LST389FA93A_15" data-languageSpecificText="cpp=%"></span>, Boolean)</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.finalize#System_Object_Finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td>Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.<br />(Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_IO_Filters_MimeFilterBase_Flush.htm">Flush</a></td><td>
            Filter the specified input, flushing all internally buffered data to the output.
            <br />(Inherited from <a href="T_MimeKit_IO_Filters_MimeFilterBase.htm">MimeFilterBase</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gethashcode#System_Object_GetHashCode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td>Serves as the default hash function.<br />(Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gettype#System_Object_GetType" target="_blank" rel="noopener noreferrer">GetType</a></td><td>Gets the <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.<br />(Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.memberwiseclone#System_Object_MemberwiseClone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td>Creates a shallow copy of the current <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.<br />(Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MailKit_Net_Smtp_SmtpDataFilter_Reset.htm">Reset</a></td><td>
            Reset the filter.
            <br />(Overrides <a href="M_MimeKit_IO_Filters_MimeFilterBase_Reset.htm">MimeFilterBase<span id="LST389FA93A_16" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Reset<span id="LST389FA93A_17" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a>)</td></tr><tr><td><img src="../icons/protMethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_MimeKit_IO_Filters_MimeFilterBase_SaveRemainingInput.htm">SaveRemainingInput</a></td><td>
            Save the remaining input for the next round of processing.
            <br />(Inherited from <a href="T_MimeKit_IO_Filters_MimeFilterBase.htm">MimeFilterBase</a>)</td></tr><tr><td><img src="../icons/pubMethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.tostring#System_Object_ToString" target="_blank" rel="noopener noreferrer">ToString</a></td><td>Returns a string that represents the current object.<br />(Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>)</td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDBC')" onkeypress="SectionExpandCollapse_CheckKey('IDBC', event)" tabindex="0"><img id="IDBCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="IDBCSection" class="collapsibleSection">
            A special stream filter that escapes lines beginning with a '.' as needed when
            sending a message via the SMTP protocol or when saving a message to an IIS
            message pickup directory.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCC')" onkeypress="SectionExpandCollapse_CheckKey('IDCC', event)" tabindex="0"><img id="IDCCToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Example</span></div><div id="IDCCSection" class="collapsibleSection"><div id="IDACC" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDACC_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDACC_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDACC');return false;" title="Copy">Copy</a></div></div><div id="IDACC_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SaveToPickupDirectory (MimeMessage message, <span class="highlight-keyword">string</span> pickupDirectory)
{
    <span class="highlight-keyword">do</span> {
        <span class="highlight-comment">// Generate a random file name to save the message to.</span>
        <span class="highlight-keyword">var</span> path = Path.Combine (pickupDirectory, Guid.NewGuid ().ToString () + <span class="highlight-literal">".eml"</span>);
        Stream stream;

        <span class="highlight-keyword">try</span> {
            <span class="highlight-comment">// Attempt to create the new file.</span>
            stream = File.Open (path, FileMode.CreateNew);
        } <span class="highlight-keyword">catch</span> (IOException) {
            <span class="highlight-comment">// If the file already exists, try again with a new Guid.</span>
            <span class="highlight-keyword">if</span> (File.Exists (path))
                <span class="highlight-keyword">continue</span>;

            <span class="highlight-comment">// Otherwise, fail immediately since it probably means that there is</span>
            <span class="highlight-comment">// no graceful way to recover from this error.</span>
            <span class="highlight-keyword">throw</span>;
        }

        <span class="highlight-keyword">try</span> {
            <span class="highlight-keyword">using</span> (stream) {
                <span class="highlight-comment">// IIS pickup directories expect the message to be "byte-stuffed"</span>
                <span class="highlight-comment">// which means that lines beginning with "." need to be escaped</span>
                <span class="highlight-comment">// by adding an extra "." to the beginning of the line.</span>
                <span class="highlight-comment">// </span>
                <span class="highlight-comment">// Use an SmtpDataFilter "byte-stuff" the message as it is written</span>
                <span class="highlight-comment">// to the file stream. This is the same process that an SmtpClient</span>
                <span class="highlight-comment">// would use when sending the message in a `DATA` command.</span>
                <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> filtered = <span class="highlight-keyword">new</span> FilteredStream (stream)) {
                    filtered.Add (<span class="highlight-keyword">new</span> SmtpDataFilter ());

                    <span class="highlight-comment">// Make sure to write the message in DOS (&lt;CR&gt;&lt;LF&gt;) format.</span>
                    <span class="highlight-keyword">var</span> options = FormatOptions.Default.Clone ();
                    options.NewLineFormat = NewLineFormat.Dos;

                    message.WriteTo (options, filtered);
                    filtered.Flush ();
                    <span class="highlight-keyword">return</span>;
                }
            }
        } <span class="highlight-keyword">catch</span> {
            <span class="highlight-comment">// An exception here probably means that the disk is full.</span>
            <span class="highlight-comment">// </span>
            <span class="highlight-comment">// Delete the file that was created above so that incomplete files are not</span>
            <span class="highlight-comment">// left behind for IIS to send accidentally.</span>
            File.Delete (path);
            <span class="highlight-keyword">throw</span>;
        }
    } <span class="highlight-keyword">while</span> (<span class="highlight-keyword">true</span>);
}
<span class="highlight-preprocessor">#endif</span>

<span class="highlight-preprocessor">#region</span> ProtocolLogger
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SendMessage (MimeMessage message)
{
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient (<span class="highlight-keyword">new</span> ProtocolLogger (<span class="highlight-literal">"smtp.log"</span>))) {
        client.Connect (<span class="highlight-literal">"smtp.gmail.com"</span>, <span class="highlight-number">465</span>, SecureSocketOptions.SslOnConnect);

        client.Authenticate (<span class="highlight-literal">"username"</span>, <span class="highlight-literal">"password"</span>);

        client.Send (message);

        client.Disconnect (<span class="highlight-keyword">true</span>);
    }

    <span class="highlight-comment">// Example log:</span>
    <span class="highlight-comment">// </span>
    <span class="highlight-comment">// Connected to smtps://smtp.gmail.com:465/</span>
    <span class="highlight-comment">// S: 220 smtp.gmail.com ESMTP w81sm22057166qkg.43 - gsmtp</span>
    <span class="highlight-comment">// C: EHLO [192.168.1.220]</span>
    <span class="highlight-comment">// S: 250-smtp.gmail.com at your service, [192.168.1.220]</span>
    <span class="highlight-comment">// S: 250-SIZE 35882577</span>
    <span class="highlight-comment">// S: 250-8BITMIME</span>
    <span class="highlight-comment">// S: 250-AUTH LOGIN PLAIN XOAUTH2 PLAIN-CLIENTTOKEN OAUTHBEARER XOAUTH</span>
    <span class="highlight-comment">// S: 250-ENHANCEDSTATUSCODES</span>
    <span class="highlight-comment">// S: 250-PIPELINING</span>
    <span class="highlight-comment">// S: 250-CHUNKING</span>
    <span class="highlight-comment">// S: 250 SMTPUTF8</span>
    <span class="highlight-comment">// C: AUTH PLAIN AHVzZXJuYW1lAHBhc3N3b3Jk</span>
    <span class="highlight-comment">// S: 235 2.7.0 Accepted</span>
    <span class="highlight-comment">// C: MAIL FROM:&lt;from.addr@gmail.com&gt;</span>
    <span class="highlight-comment">// C: RCPT TO:&lt;to.addr@gmail.com&gt;</span>
    <span class="highlight-comment">// S: 250 2.1.0 OK w81sm22057166qkg.43 - gsmtp</span>
    <span class="highlight-comment">// S: 250 2.1.5 OK w81sm22057166qkg.43 - gsmtp</span>
    <span class="highlight-comment">// C: DATA</span>
    <span class="highlight-comment">// S: 354  Go ahead w81sm22057166qkg.43 - gsmtp</span>
    <span class="highlight-comment">// C: From: "LastName, FirstName" &lt;from.addr@gmail.com&gt;</span>
    <span class="highlight-comment">// C: Date: Thu, 27 Dec 2018 10:55:18 -0500</span>
    <span class="highlight-comment">// C: Subject: This is a test message</span>
    <span class="highlight-comment">// C: Message-Id: &lt;C7GVXWE3C6U4.7ZQ0K9OUHTDP1@MADUNLA-SP4.northamerica.corp.microsoft.com&gt;</span>
    <span class="highlight-comment">// C: To: "LastName, FirstName" &lt;to.addr@gmail.com&gt;</span>
    <span class="highlight-comment">// C: MIME-Version: 1.0</span>
    <span class="highlight-comment">// C: Content-Type: multipart/alternative; boundary="=-CToJI+AD2gS6z+fFlzDvhg=="</span>
    <span class="highlight-comment">// C: </span>
    <span class="highlight-comment">// C: --=-CToJI+AD2gS6z+fFlzDvhg==</span>
    <span class="highlight-comment">// C: Content-Type: text/plain; charset=utf-8</span>
    <span class="highlight-comment">// C: Content-Transfer-Encoding: quoted-printable</span>
    <span class="highlight-comment">// C: </span>
    <span class="highlight-comment">// C: This is the text/plain message body.</span>
    <span class="highlight-comment">// C: --=-CToJI+AD2gS6z+fFlzDvhg==</span>
    <span class="highlight-comment">// C: Content-Type: text/html; charset=utf-8</span>
    <span class="highlight-comment">// C: Content-Transfer-Encoding: quoted-printable</span>
    <span class="highlight-comment">// C: </span>
    <span class="highlight-comment">// C: &lt;html&gt;&lt;body&gt;&lt;center&gt;This is the &lt;b&gt;text/html&lt;/b&gt; message body.&lt;/center&gt;&lt;/body&gt;&lt;/html&gt;</span>
    <span class="highlight-comment">// C: --=-CToJI+AD2gS6z+fFlzDvhg==--</span>
    <span class="highlight-comment">// C: </span>
    <span class="highlight-comment">// C: .</span>
    <span class="highlight-comment">// S: 250 2.0.0 OK 1545926120 w81sm22057166qkg.43 - gsmtp</span>
    <span class="highlight-comment">// C: QUIT</span>
    <span class="highlight-comment">// S: 221 2.0.0 closing connection w81sm22057166qkg.43 - gsmtp</span>
}
<span class="highlight-preprocessor">#endregion</span>

<span class="highlight-preprocessor">#region</span> Capabilities
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> PrintCapabilities ()
{
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
        client.Connect (<span class="highlight-literal">"smtp.gmail.com"</span>, <span class="highlight-number">465</span>, SecureSocketOptions.SslOnConnect);

        <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (SmtpCapabilities.Authentication)) {
            <span class="highlight-keyword">var</span> mechanisms = <span class="highlight-keyword">string</span>.Join (<span class="highlight-literal">", "</span>, client.AuthenticationMechanisms);
            Console.WriteLine (<span class="highlight-literal">"The SMTP server supports the following SASL mechanisms: {0}"</span>, mechanisms);
            client.Authenticate (<span class="highlight-literal">"username"</span>, <span class="highlight-literal">"password"</span>);
        }

        <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (SmtpCapabilities.Size))
            Console.WriteLine (<span class="highlight-literal">"The SMTP server has a size restriction on messages: {0}."</span>, client.MaxSize);

        <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (SmtpCapabilities.Dsn))
            Console.WriteLine (<span class="highlight-literal">"The SMTP server supports delivery-status notifications."</span>);

        <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (SmtpCapabilities.EightBitMime))
            Console.WriteLine (<span class="highlight-literal">"The SMTP server supports Content-Transfer-Encoding: 8bit"</span>);

        <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (SmtpCapabilities.BinaryMime))
            Console.WriteLine (<span class="highlight-literal">"The SMTP server supports Content-Transfer-Encoding: binary"</span>);

        <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (SmtpCapabilities.UTF8))
            Console.WriteLine (<span class="highlight-literal">"The SMTP server supports UTF-8 in message headers."</span>);

        client.Disconnect (<span class="highlight-keyword">true</span>);
    }
}
<span class="highlight-preprocessor">#endregion</span>

<span class="highlight-preprocessor">#region</span> ExceptionHandling
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SendMessage (MimeMessage message)
{
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
        <span class="highlight-keyword">try</span> {
            client.Connect (<span class="highlight-literal">"smtp.gmail.com"</span>, <span class="highlight-number">465</span>, SecureSocketOptions.SslOnConnect);
        } <span class="highlight-keyword">catch</span> (SmtpCommandException ex) {
            Console.WriteLine (<span class="highlight-literal">"Error trying to connect: {0}"</span>, ex.Message);
            Console.WriteLine (<span class="highlight-literal">"\tStatusCode: {0}"</span>, ex.StatusCode);
            <span class="highlight-keyword">return</span>;
        } <span class="highlight-keyword">catch</span> (SmtpProtocolException ex) {
            Console.WriteLine (<span class="highlight-literal">"Protocol error while trying to connect: {0}"</span>, ex.Message);
            <span class="highlight-keyword">return</span>;
        }

        <span class="highlight-comment">// Note: Not all SMTP servers support authentication, but GMail does.</span>
        <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (SmtpCapabilities.Authentication)) {
            <span class="highlight-keyword">try</span> {
                client.Authenticate (<span class="highlight-literal">"username"</span>, <span class="highlight-literal">"password"</span>);
            } <span class="highlight-keyword">catch</span> (AuthenticationException ex) {
                Console.WriteLine (<span class="highlight-literal">"Invalid user name or password."</span>);
                <span class="highlight-keyword">return</span>;
            } <span class="highlight-keyword">catch</span> (SmtpCommandException ex) {
                Console.WriteLine (<span class="highlight-literal">"Error trying to authenticate: {0}"</span>, ex.Message);
                Console.WriteLine (<span class="highlight-literal">"\tStatusCode: {0}"</span>, ex.StatusCode);
                <span class="highlight-keyword">return</span>;
            } <span class="highlight-keyword">catch</span> (SmtpProtocolException ex) {
                Console.WriteLine (<span class="highlight-literal">"Protocol error while trying to authenticate: {0}"</span>, ex.Message);
                <span class="highlight-keyword">return</span>;
            }
        }

        <span class="highlight-keyword">try</span> {
            client.Send (message);
        } <span class="highlight-keyword">catch</span> (SmtpCommandException ex) {
            Console.WriteLine (<span class="highlight-literal">"Error sending message: {0}"</span>, ex.Message);
            Console.WriteLine (<span class="highlight-literal">"\tStatusCode: {0}"</span>, ex.StatusCode);

            <span class="highlight-keyword">switch</span> (ex.ErrorCode) {
            <span class="highlight-keyword">case</span> SmtpErrorCode.RecipientNotAccepted:
                Console.WriteLine (<span class="highlight-literal">"\tRecipient not accepted: {0}"</span>, ex.Mailbox);
                <span class="highlight-keyword">break</span>;
            <span class="highlight-keyword">case</span> SmtpErrorCode.SenderNotAccepted:
                Console.WriteLine (<span class="highlight-literal">"\tSender not accepted: {0}"</span>, ex.Mailbox);
                <span class="highlight-keyword">break</span>;
            <span class="highlight-keyword">case</span> SmtpErrorCode.MessageNotAccepted:
                Console.WriteLine (<span class="highlight-literal">"\tMessage not accepted."</span>);
                <span class="highlight-keyword">break</span>;
            }
        } <span class="highlight-keyword">catch</span> (SmtpProtocolException ex) {
            Console.WriteLine (<span class="highlight-literal">"Protocol error while sending message: {0}"</span>, ex.Message);
        }

        client.Disconnect (<span class="highlight-keyword">true</span>);
    }
}
<span class="highlight-preprocessor">#endregion</span>

<span class="highlight-preprocessor">#region</span> SendMessage
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SendMessage (MimeMessage message)
{
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
        client.Connect (<span class="highlight-literal">"smtp.gmail.com"</span>, <span class="highlight-number">465</span>, SecureSocketOptions.SslOnConnect);

        client.Authenticate (<span class="highlight-literal">"username"</span>, <span class="highlight-literal">"password"</span>);

        client.Send (message);

        client.Disconnect (<span class="highlight-keyword">true</span>);
    }
}
<span class="highlight-preprocessor">#endregion</span>

<span class="highlight-preprocessor">#region</span> SendMessageUri
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SendMessage (MimeMessage message)
{
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
        <span class="highlight-comment">// Note: since GMail requires SSL at connection time, use the "smtps"</span>
        <span class="highlight-comment">// protocol instead of "smtp".</span>
        <span class="highlight-keyword">var</span> uri = <span class="highlight-keyword">new</span> Uri (<span class="highlight-literal">"smtps://smtp.gmail.com:465"</span>);

        client.Connect (uri);

        client.Authenticate (<span class="highlight-literal">"username"</span>, <span class="highlight-literal">"password"</span>);

        client.Send (message);

        client.Disconnect (<span class="highlight-keyword">true</span>);
    }
}
<span class="highlight-preprocessor">#endregion</span>

<span class="highlight-preprocessor">#region</span> SendMessageWithOptions
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SendMessageWithOptions (MimeMessage message)
{
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
        client.Connect (<span class="highlight-literal">"smtp.gmail.com"</span>, <span class="highlight-number">465</span>, SecureSocketOptions.SslOnConnect);

        client.Authenticate (<span class="highlight-literal">"username"</span>, <span class="highlight-literal">"password"</span>);

        <span class="highlight-keyword">var</span> options = FormatOptions.Default.Clone ();

        <span class="highlight-keyword">if</span> (client.Capabilities.HasFlag (SmtpCapabilities.UTF8))
            options.International = <span class="highlight-keyword">true</span>;

        client.Send (options, message);

        client.Disconnect (<span class="highlight-keyword">true</span>);
    }
}
<span class="highlight-preprocessor">#endregion</span>

<span class="highlight-preprocessor">#region</span> SendMessages
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> SendMessages (IList&lt;MimeMessage&gt; messages)
{
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
        client.Connect (<span class="highlight-literal">"smtp.gmail.com"</span>, <span class="highlight-number">465</span>, SecureSocketOptions.SslOnConnect);

        client.Authenticate (<span class="highlight-literal">"username"</span>, <span class="highlight-literal">"password"</span>);

        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> message <span class="highlight-keyword">in</span> messages) {
            client.Send (message);
        }

        client.Disconnect (<span class="highlight-keyword">true</span>);
    }
}
<span class="highlight-preprocessor">#endregion</span>

<span class="highlight-preprocessor">#region</span> DeliveryStatusNotification
<span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> DSNSmtpClient : SmtpClient
{
    <span class="highlight-keyword">public</span> DSNSmtpClient ()
    {
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Get the envelope identifier to be used with delivery status notifications.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;remarks&gt;</span>
    <span class="highlight-comment">/// &lt;para&gt;The envelope identifier, if non-empty, is useful in determining which message</span>
    <span class="highlight-comment">/// a delivery status notification was issued for.&lt;/para&gt;</span>
    <span class="highlight-comment">/// &lt;para&gt;The envelope identifier should be unique and may be up to 100 characters in</span>
    <span class="highlight-comment">/// length, but must consist only of printable ASCII characters and no white space.&lt;/para&gt;</span>
    <span class="highlight-comment">/// &lt;para&gt;For more information, see rfc3461, section 4.4.&lt;/para&gt;</span>
    <span class="highlight-comment">/// &lt;/remarks&gt;</span>
    <span class="highlight-comment">/// &lt;returns&gt;The envelope identifier.&lt;/returns&gt;</span>
    <span class="highlight-comment">/// &lt;param name="message"&gt;The message.&lt;/param&gt;</span>
    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">string</span> GetEnvelopeId (MimeMessage message)
    {
        <span class="highlight-comment">// Since you will want to be able to map whatever identifier you return here to the</span>
        <span class="highlight-comment">// message, the obvious identifier to use is probably the Message-Id value.</span>
        <span class="highlight-keyword">return</span> message.MessageId;
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Get the types of delivery status notification desired for the specified recipient mailbox.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;remarks&gt;</span>
    <span class="highlight-comment">/// Gets the types of delivery status notification desired for the specified recipient mailbox.</span>
    <span class="highlight-comment">/// &lt;/remarks&gt;</span>
    <span class="highlight-comment">/// &lt;returns&gt;The desired delivery status notification type.&lt;/returns&gt;</span>
    <span class="highlight-comment">/// &lt;param name="message"&gt;The message being sent.&lt;/param&gt;</span>
    <span class="highlight-comment">/// &lt;param name="mailbox"&gt;The mailbox.&lt;/param&gt;</span>
    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> DeliveryStatusNotification? GetDeliveryStatusNotifications (MimeMessage message, MailboxAddress mailbox)
    {
        <span class="highlight-comment">// In this example, we only want to be notified of failures to deliver to a mailbox.</span>
        <span class="highlight-comment">// If you also want to be notified of delays or successful deliveries, simply bitwise-or</span>
        <span class="highlight-comment">// whatever combination of flags you want to be notified about.</span>
        <span class="highlight-keyword">return</span> DeliveryStatusNotification.Failure;
    }
}
<span class="highlight-preprocessor">#endregion</span>

<span class="highlight-preprocessor">#region</span> SslConnectionInformation
<span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">void</span> PrintSslConnectionInfo (<span class="highlight-keyword">string</span> host, <span class="highlight-keyword">int</span> port)
{
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
        client.Connect (host, port, SecureSocketOptions.Auto);

        Console.WriteLine ($<span class="highlight-literal">"Negotiated the following SSL options with {host}:"</span>);
        Console.WriteLine ($<span class="highlight-literal">"        Protocol Version: {client.SslProtocol}"</span>);
        Console.WriteLine ($<span class="highlight-literal">"        Cipher Algorithm: {client.SslCipherAlgorithm}"</span>);
        Console.WriteLine ($<span class="highlight-literal">"         Cipher Strength: {client.SslCipherStrength}"</span>);
        Console.WriteLine ($<span class="highlight-literal">"          Hash Algorithm: {client.SslHashAlgorithm}"</span>);
        Console.WriteLine ($<span class="highlight-literal">"           Hash Strength: {client.SslHashStrength}"</span>);
        Console.WriteLine ($<span class="highlight-literal">"  Key-Exchange Algorithm: {client.SslKeyExchangeAlgorithm}"</span>);
        Console.WriteLine ($<span class="highlight-literal">"   Key-Exchange Strength: {client.SslKeyExchangeStrength}"</span>);

        <span class="highlight-comment">// Example Log:</span>
        <span class="highlight-comment">// </span>
        <span class="highlight-comment">// Negotiated the following SSL options with smtp.gmail.com:</span>
        <span class="highlight-comment">//         Protocol Version: Tls12</span>
        <span class="highlight-comment">//         Cipher Algorithm: Aes128</span>
        <span class="highlight-comment">//          Cipher Strength: 128</span>
        <span class="highlight-comment">//           Hash Algorithm: Sha256</span>
        <span class="highlight-comment">//            Hash Strength: 0</span>
        <span class="highlight-comment">//   Key-Exchange Algorithm: 44550</span>
        <span class="highlight-comment">//    Key-Exchange Strength: 255</span>

        client.Disconnect (<span class="highlight-keyword">true</span>);
    }
}</pre></div></div></div></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('seeAlso')" onkeypress="SectionExpandCollapse_CheckKey('seeAlso', event)" tabindex="0"><img id="seeAlsoToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="seeAlsoSection" class="collapsibleSection"><h4>Reference</h4><div><a href="N_MailKit_Net_Smtp.htm">MailKit.Net.Smtp Namespace</a></div></div></div></div><div id="PageFooter" class="pageFooter"><!-- Global site tag (gtag.js) - Google Analytics -->
<script src="https://www.googletagmanager.com/gtag/js?id=UA-63841238-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-63841238-1');
</script><p><a href="https://github.com/jstedfast" target="_blank" rel="noopener noreferrer">Copyright © 2013-2023 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit%20Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>