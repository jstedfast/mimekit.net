<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"> </script><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><title>HtmlTagContext Class</title><meta name="Language" content="en-us" /><meta name="System.Keywords" content="HtmlTagContext class" /><meta name="System.Keywords" content="MimeKit.Text.HtmlTagContext class" /><meta name="Microsoft.Help.F1" content="MimeKit.Text.HtmlTagContext" /><meta name="Microsoft.Help.Id" content="T:MimeKit.Text.HtmlTagContext" /><meta name="Description" content="An HTML tag context." /><meta name="Microsoft.Help.ContentType" content="Reference" /><meta name="BrandingAware" content="true" /><meta name="container" content="MimeKit.Text" /><meta name="file" content="T_MimeKit_Text_HtmlTagContext" /><meta name="guid" content="T_MimeKit_Text_HtmlTagContext" /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="OnLoad('cs')"><input type="hidden" id="userDataCache" class="userDataStyle" /><div class="pageHeader" id="PageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="javascript:TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div><div class="toclevel0" data-toclevel="0"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/N_MimeKit_Text.htm" title="MimeKit.Text" tocid="N_MimeKit_Text">MimeKit.Text</a></div><div class="toclevel1 current" data-toclevel="1" data-childrenloaded="true"><a class="tocExpanded" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/T_MimeKit_Text_HtmlTagContext.htm" title="HtmlTagContext Class" tocid="T_MimeKit_Text_HtmlTagContext">HtmlTagContext Class</a></div><div class="toclevel2" data-toclevel="2"><a data-tochassubtree="false" href="../html/M_MimeKit_Text_HtmlTagContext__ctor.htm" title="HtmlTagContext Constructor " tocid="M_MimeKit_Text_HtmlTagContext__ctor">HtmlTagContext Constructor </a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Properties_T_MimeKit_Text_HtmlTagContext.htm" title="HtmlTagContext Properties" tocid="Properties_T_MimeKit_Text_HtmlTagContext">HtmlTagContext Properties</a></div><div class="toclevel2" data-toclevel="2"><a class="tocCollapsed" onclick="javascript: Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Methods_T_MimeKit_Text_HtmlTagContext.htm" title="HtmlTagContext Methods" tocid="Methods_T_MimeKit_Text_HtmlTagContext">HtmlTagContext Methods</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div class="topicContent" id="TopicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>HtmlTagContext Class</h1></td></tr></table><span class="introStyle"></span> <div class="summary">
            An HTML tag context.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID0RB')" onkeypress="SectionExpandCollapse_CheckKey('ID0RB', event)" tabindex="0"><img id="ID0RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Inheritance Hierarchy</span></div><div id="ID0RBSection" class="collapsibleSection"><a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">System<span id="LST8F635E19_0"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8F635E19_0?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>Object</a><br />  <span class="selflink">MimeKit.Text<span id="LST8F635E19_1"></span><script type="text/javascript">AddLanguageSpecificTextSet("LST8F635E19_1?cs=.|vb=.|cpp=::|nu=.|fs=.");</script>HtmlTagContext</span><br /></div><p> </p>
    <strong>Namespace:</strong> 
   <a href="N_MimeKit_Text.htm">MimeKit.Text</a><br />
    <strong>Assembly:</strong>
   MimeKit (in MimeKit.dll) Version: 3.0.0<div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID2RB')" onkeypress="SectionExpandCollapse_CheckKey('ID2RB', event)" tabindex="0"><img id="ID2RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Syntax</span></div><div id="ID2RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EACA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EACA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EACA');return false;" title="Copy">Copy</a></div></div><div id="ID1EACA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="identifier">HtmlTagContext</span></pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EACA");</script></div><p>The <span class="selflink">HtmlTagContext</span> type exposes the following members.</p><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID3RB')" onkeypress="SectionExpandCollapse_CheckKey('ID3RB', event)" tabindex="0"><img id="ID3RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Constructors</span></div><div id="ID3RBSection" class="collapsibleSection"><table class="members" id="constructorList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="protected;declared;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="M_MimeKit_Text_HtmlTagContext__ctor.htm">HtmlTagContext</a></td><td><div class="summary">
            Initialize a new instance of the <span class="selflink">HtmlTagContext</span> class.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID4RB')" onkeypress="SectionExpandCollapse_CheckKey('ID4RB', event)" tabindex="0"><img id="ID4RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Properties</span></div><div id="ID4RBSection" class="collapsibleSection"><table class="members" id="propertyList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_Attributes.htm">Attributes</a></td><td><div class="summary">
            Get the HTML tag attributes.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_DeleteEndTag.htm">DeleteEndTag</a></td><td><div class="summary">
            Get or set whether or not the end tag should be deleted.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_DeleteTag.htm">DeleteTag</a></td><td><div class="summary">
            Get or set whether or not the tag should be deleted.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_InvokeCallbackForEndTag.htm">InvokeCallbackForEndTag</a></td><td><div class="summary">
            Get or set whether or not the <a href="T_MimeKit_Text_HtmlTagCallback.htm">HtmlTagCallback</a> should be invoked for the end tag.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_IsEmptyElementTag.htm">IsEmptyElementTag</a></td><td><div class="summary">
            Get whether or not the tag is an empty element.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_IsEndTag.htm">IsEndTag</a></td><td><div class="summary">
            Get whether or not the tag is an end tag.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_SuppressInnerContent.htm">SuppressInnerContent</a></td><td><div class="summary">
            Get or set whether or not the inner content of the tag should be suppressed.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_TagId.htm">TagId</a></td><td><div class="summary">
            Get the HTML tag identifier.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubproperty.gif" alt="Public property" title="Public property" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="P_MimeKit_Text_HtmlTagContext_TagName.htm">TagName</a></td><td><div class="summary">
            Get the HTML tag name.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID5RB')" onkeypress="SectionExpandCollapse_CheckKey('ID5RB', event)" tabindex="0"><img id="ID5RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Methods</span></div><div id="ID5RBSection" class="collapsibleSection"><table class="members" id="methodList"><tr><th class="iconColumn">
								 
							</th><th>Name</th><th>Description</th></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.equals#System_Object_Equals_System_Object_" target="_blank" rel="noopener noreferrer">Equals</a></td><td><div class="summary">Determines whether the specified object is equal to the current object.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.finalize#System_Object_Finalize" target="_blank" rel="noopener noreferrer">Finalize</a></td><td><div class="summary">Allows an object to try to free resources and perform other cleanup operations before it is reclaimed by garbage collection.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gethashcode#System_Object_GetHashCode" target="_blank" rel="noopener noreferrer">GetHashCode</a></td><td><div class="summary">Serves as the default hash function. </div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.gettype#System_Object_GetType" target="_blank" rel="noopener noreferrer">GetType</a></td><td><div class="summary">Gets the <a href="https://docs.microsoft.com/dotnet/api/system.type" target="_blank" rel="noopener noreferrer">Type</a> of the current instance.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.)</td></tr><tr data="protected;inherited;notNetfw;"><td><img src="../icons/protmethod.gif" alt="Protected method" title="Protected method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.memberwiseclone#System_Object_MemberwiseClone" target="_blank" rel="noopener noreferrer">MemberwiseClone</a></td><td><div class="summary">Creates a shallow copy of the current <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.)</td></tr><tr data="public;inherited;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="https://docs.microsoft.com/dotnet/api/system.object.tostring#System_Object_ToString" target="_blank" rel="noopener noreferrer">ToString</a></td><td><div class="summary">Returns a string that represents the current object.</div> (Inherited from <a href="https://docs.microsoft.com/dotnet/api/system.object" target="_blank" rel="noopener noreferrer">Object</a>.)</td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /></td><td><a href="M_MimeKit_Text_HtmlTagContext_WriteTag.htm">WriteTag(HtmlWriter)</a></td><td><div class="summary">
            Write the HTML tag.
            </div></td></tr><tr data="public;declared;notNetfw;"><td><img src="../icons/pubmethod.gif" alt="Public method" title="Public method" /><img src="../icons/CodeExample.png" alt="Code example" title="Code example" /></td><td><a href="M_MimeKit_Text_HtmlTagContext_WriteTag_1.htm">WriteTag(HtmlWriter, Boolean)</a></td><td><div class="summary">
            Write the HTML tag.
            </div></td></tr></table><a href="#PageHeader">Top</a></div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID6RB')" onkeypress="SectionExpandCollapse_CheckKey('ID6RB', event)" tabindex="0"><img id="ID6RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Remarks</span></div><div id="ID6RBSection" class="collapsibleSection">
            An HTML tag context used with the <a href="T_MimeKit_Text_HtmlTagCallback.htm">HtmlTagCallback</a> delegate.
            </div><div class="collapsibleAreaRegion"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID7RB')" onkeypress="SectionExpandCollapse_CheckKey('ID7RB', event)" tabindex="0"><img id="ID7RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Examples</span></div><div id="ID7RBSection" class="collapsibleSection"><div class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="ID1EAAABA_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="ID1EAAABA_copyCode" href="#" class="copyCodeSnippet" onclick="javascript:CopyToClipboard('ID1EAAABA');return false;" title="Copy">Copy</a></div></div><div id="ID1EAAABA_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Visits a MimeMessage and generates HTML suitable to be rendered by a browser control.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">class</span> HtmlPreviewVisitor : MimeVisitor
{
    List&lt;MultipartRelated&gt; stack = <span class="highlight-keyword">new</span> List&lt;MultipartRelated&gt; ();
    List&lt;MimeEntity&gt; attachments = <span class="highlight-keyword">new</span> List&lt;MimeEntity&gt; ();
    <span class="highlight-keyword">readonly</span> <span class="highlight-keyword">string</span> tempDir;
    <span class="highlight-keyword">string</span> body;

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Creates a new HtmlPreviewVisitor.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;param name="tempDirectory"&gt;A temporary directory used for storing image files.&lt;/param&gt;</span>
    <span class="highlight-keyword">public</span> HtmlPreviewVisitor (<span class="highlight-keyword">string</span> tempDirectory)
    {
        tempDir = tempDirectory;
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// The list of attachments that were in the MimeMessage.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> IList&lt;MimeEntity&gt; Attachments {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> attachments; }
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// The HTML string that can be set on the BrowserControl.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> HtmlBody {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> body ?? <span class="highlight-keyword">string</span>.Empty; }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartAlternative (MultipartAlternative alternative)
    {
        <span class="highlight-comment">// walk the multipart/alternative children backwards from greatest level of faithfulness to the least faithful</span>
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = alternative.Count - <span class="highlight-number">1</span>; i &gt;= <span class="highlight-number">0</span> &amp;&amp; body == <span class="highlight-keyword">null</span>; i--)
            alternative[i].Accept (<span class="highlight-keyword">this</span>);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartRelated (MultipartRelated related)
    {
        <span class="highlight-keyword">var</span> root = related.Root;

        <span class="highlight-comment">// push this multipart/related onto our stack</span>
        stack.Add (related);

        <span class="highlight-comment">// visit the root document</span>
        root.Accept (<span class="highlight-keyword">this</span>);

        <span class="highlight-comment">// pop this multipart/related off our stack</span>
        stack.RemoveAt (stack.Count - <span class="highlight-number">1</span>);
    }

    <span class="highlight-comment">// look up the image based on the img src url within our multipart/related stack</span>
    <span class="highlight-keyword">bool</span> TryGetImage (<span class="highlight-keyword">string</span> url, <span class="highlight-keyword">out</span> MimePart image)
    {
        UriKind kind;
        <span class="highlight-keyword">int</span> index;
        Uri uri;

        <span class="highlight-keyword">if</span> (Uri.IsWellFormedUriString (url, UriKind.Absolute))
            kind = UriKind.Absolute;
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (Uri.IsWellFormedUriString (url, UriKind.Relative))
            kind = UriKind.Relative;
        <span class="highlight-keyword">else</span>
            kind = UriKind.RelativeOrAbsolute;

        <span class="highlight-keyword">try</span> {
            uri = <span class="highlight-keyword">new</span> Uri (url, kind);
        } <span class="highlight-keyword">catch</span> {
            image = <span class="highlight-keyword">null</span>;
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
        }

        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = stack.Count - <span class="highlight-number">1</span>; i &gt;= <span class="highlight-number">0</span>; i--) {
            <span class="highlight-keyword">if</span> ((index = stack[i].IndexOf (uri)) == <span class="highlight-number">-1</span>)
                <span class="highlight-keyword">continue</span>;

            image = stack[i][index] <span class="highlight-keyword">as</span> MimePart;
            <span class="highlight-keyword">return</span> image != <span class="highlight-keyword">null</span>;
        }

        image = <span class="highlight-keyword">null</span>;

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
    }

    <span class="highlight-comment">// Save the image to our temp directory and return a "file://" url suitable for</span>
    <span class="highlight-comment">// the browser control to load.</span>
    <span class="highlight-comment">// Note: if you'd rather embed the image data into the HTML, you can construct a</span>
    <span class="highlight-comment">// "data:" url instead.</span>
    <span class="highlight-keyword">string</span> SaveImage (MimePart image, <span class="highlight-keyword">string</span> url)
    {
        <span class="highlight-keyword">string</span> fileName = url.Replace (<span class="highlight-literal">':'</span>, <span class="highlight-literal">'_'</span>).Replace (<span class="highlight-literal">'\\'</span>, <span class="highlight-literal">'_'</span>).Replace (<span class="highlight-literal">'/'</span>, <span class="highlight-literal">'_'</span>);

        <span class="highlight-keyword">string</span> path = Path.Combine (tempDir, fileName);

        <span class="highlight-keyword">if</span> (!File.Exists (path)) {
            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> output = File.Create (path))
                image.Content.DecodeTo (output);
        }

        <span class="highlight-keyword">return</span> <span class="highlight-literal">"file://"</span> + path.Replace (<span class="highlight-literal">'\\'</span>, <span class="highlight-literal">'/'</span>);
    }

    <span class="highlight-comment">// Replaces &lt;img src=...&gt; urls that refer to images embedded within the message with</span>
    <span class="highlight-comment">// "file://" urls that the browser control will actually be able to load.</span>
    <span class="highlight-keyword">void</span> HtmlTagCallback (HtmlTagContext ctx, HtmlWriter htmlWriter)
    {
        <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Image &amp;&amp; !ctx.IsEndTag &amp;&amp; stack.Count &gt; <span class="highlight-number">0</span>) {
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// replace the src attribute with a file:// URL</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.Src) {
                    MimePart image;
                    <span class="highlight-keyword">string</span> url;

                    <span class="highlight-keyword">if</span> (!TryGetImage (attribute.Value, <span class="highlight-keyword">out</span> image)) {
                        htmlWriter.WriteAttribute (attribute);
                        <span class="highlight-keyword">continue</span>;
                    }

                    url = SaveImage (image, attribute.Value);

                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (url);
                } <span class="highlight-keyword">else</span> {
                    htmlWriter.WriteAttribute (attribute);
                }
            }
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Body &amp;&amp; !ctx.IsEndTag) {
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// add and/or replace oncontextmenu="return false;"</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Name.ToLowerInvariant () == <span class="highlight-literal">"oncontextmenu"</span>)
                    <span class="highlight-keyword">continue</span>;

                htmlWriter.WriteAttribute (attribute);
            }

            htmlWriter.WriteAttribute (<span class="highlight-literal">"oncontextmenu"</span>, <span class="highlight-literal">"return false;"</span>);
        } <span class="highlight-keyword">else</span> {
            <span class="highlight-comment">// pass the tag through to the output</span>
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">true</span>);
        }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTextPart (TextPart entity)
    {
        TextConverter converter;

        <span class="highlight-keyword">if</span> (body != <span class="highlight-keyword">null</span>) {
            <span class="highlight-comment">// since we've already found the body, treat this as an attachment</span>
            attachments.Add (entity);
            <span class="highlight-keyword">return</span>;
        }

        <span class="highlight-keyword">if</span> (entity.IsHtml) {
            converter = <span class="highlight-keyword">new</span> HtmlToHtml {
                HtmlTagCallback = HtmlTagCallback
            };
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (entity.IsFlowed) {
            <span class="highlight-keyword">var</span> flowed = <span class="highlight-keyword">new</span> FlowedToHtml ();
            <span class="highlight-keyword">string</span> delsp;

            <span class="highlight-keyword">if</span> (entity.ContentType.Parameters.TryGetValue (<span class="highlight-literal">"delsp"</span>, <span class="highlight-keyword">out</span> delsp))
                flowed.DeleteSpace = delsp.ToLowerInvariant () == <span class="highlight-literal">"yes"</span>;

            converter = flowed;
        } <span class="highlight-keyword">else</span> {
            converter = <span class="highlight-keyword">new</span> TextToHtml ();
        }

        body = converter.Convert (entity.Text);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTnefPart (TnefPart entity)
    {
        <span class="highlight-comment">// extract any attachments in the MS-TNEF part</span>
        attachments.AddRange (entity.ExtractAttachments ());
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMessagePart (MessagePart entity)
    {
        <span class="highlight-comment">// treat message/rfc822 parts as attachments</span>
        attachments.Add (entity);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMimePart (MimePart entity)
    {
        <span class="highlight-comment">// realistically, if we've gotten this far, then we can treat this as an attachment</span>
        <span class="highlight-comment">// even if the IsAttachment property is false.</span>
        attachments.Add (entity);
    }
}</pre></div></div></div><script type="text/javascript">AddLanguageTabSet("ID1EAAABA");</script></div><div class="collapsibleAreaRegion" id="seeAlsoSection"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('ID8RB')" onkeypress="SectionExpandCollapse_CheckKey('ID8RB', event)" tabindex="0"><img id="ID8RBToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />See Also</span></div><div id="ID8RBSection" class="collapsibleSection"><h4 class="subHeading">Reference</h4><div class="seeAlsoStyle"><a href="N_MimeKit_Text.htm">MimeKit.Text Namespace</a></div></div></div></div><div id="pageFooter" class="pageFooter"><!-- Global site tag (gtag.js) - Google Analytics -->
<script src="https://www.googletagmanager.com/gtag/js?id=UA-63841238-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-63841238-1');
</script><p><a href="https://github.com/jstedfast" target="_blank" rel="noopener noreferrer">Copyright © 2013-2021 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit%20Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div></body></html>