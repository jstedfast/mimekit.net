<html><head><meta http-equiv="X-UA-Compatible" content="IE=edge" /><meta http-equiv="Content-Type" content="text/html; charset=UTF-8" /><meta name="Microsoft.Help.SelfBranded" content="true" /><meta name="Language" content="en-us" /><meta name="Microsoft.Help.Locale" content="en-us" /><meta name="Microsoft.Help.TopicLocale" content="en-us" /><link rel="shortcut icon" href="../icons/favicon.ico" /><link rel="stylesheet" type="text/css" href="../styles/branding.css" /><link rel="stylesheet" type="text/css" href="../styles/branding-en-US.css" /><script type="text/javascript" src="../scripts/branding.js"></script><title>Frequently Asked Questions</title><meta name="Microsoft.Help.Id" content="Frequently-Asked-Questions" /><meta name="Microsoft.Help.ContentType" content="Concepts" /><meta name="Microsoft.Help.Category" content="CSharp" /><meta name="Description" content="Yes. MimeKit and MailKit are both completely free and open source. They are both covered under the MIThttps://opensource.org/licenses/MIT_blank license." /><link type="text/css" rel="stylesheet" href="../styles/highlight.css" /><script type="text/javascript" src="../scripts/highlight.js"> </script><link rel="stylesheet" type="text/css" href="../styles/branding-Website.css" /><script type="text/javascript" src="../scripts/jquery-3.5.1.min.js"></script><script type="text/javascript" src="../scripts/branding-Website.js"></script><script type="text/javascript" src="../scripts/clipboard.min.js"></script></head><body onload="SetDefaultLanguage('cs');"><input type="hidden" id="userDataCache" class="userDataStyle" /><div id="PageHeader" class="pageHeader">MailKit Documentation<form id="SearchForm" method="get" action="#" onsubmit="TransferToSearchPage(); return false;"><input id="SearchTextBox" type="text" maxlength="200" /><button id="SearchButton" type="submit"></button></form></div><div class="pageBody"><div class="leftNav" id="leftNav"><div id="tocNav"><div class="toclevel0" data-toclevel="0" data-childrenloaded="true"><a class="tocExpanded" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Introduction.htm" title="MailKit Documentation" tocid="roottoc">MailKit Documentation</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="../html/Introduction.htm" title="Introduction" tocid="Introduction">Introduction</a></div><div class="toclevel1" data-toclevel="1"><a data-tochassubtree="false" href="../html/License.htm" title="License Agreement" tocid="License">License Agreement</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/Getting-Started.htm" title="Getting Started" tocid="Getting-Started">Getting Started</a></div><div class="toclevel1 current" data-toclevel="1"><a data-tochassubtree="false" href="../html/Frequently-Asked-Questions.htm" title="Frequently Asked Questions" tocid="Frequently-Asked-Questions">Frequently Asked Questions</a></div><div class="toclevel1" data-toclevel="1"><a class="tocCollapsed" onclick="Toggle(this);" href="#!" /><a data-tochassubtree="true" href="../html/R_Project_Documentation.htm" title="API Reference" tocid="R_Project_Documentation">API Reference</a></div></div><div id="tocResizableEW" onmousedown="OnMouseDown(event);"></div><div id="TocResize" class="tocResize"><img id="ResizeImageIncrease" src="../icons/TocOpen.gif" onclick="OnIncreaseToc()" alt="Click or drag to resize" title="Click or drag to resize" /><img id="ResizeImageReset" src="../icons/TocClose.gif" style="display:none" onclick="OnResetToc()" alt="Click or drag to resize" title="Click or drag to resize" /></div></div><div id="TopicContent" class="topicContent"><table class="titleTable"><tr><td class="logoColumn"><img alt="MimeKit" src="../icons/Help.png" /></td><td class="titleColumn"><h1>Frequently Asked Questions</h1></td></tr></table><div><p>This topic contains the following sections:</p><ul><li><a href="#CompletelyFree">Are MimeKit and MailKit completely free? Can I use them in my proprietary product(s)?</a></li><li><a href="#SslHandshakeException">Why do I get "An error occurred while attempting to establish an SSL or TLS connection." when I try to Connect?</a></li><li><a href="#ProtocolLog">How do I debug SMTP, POP3 and/or IMAP errors?</a></li><li><a href="#GMailHiddenMessages">Why don't I see some of my messages when accessing GMail with POP3?</a></li><li><a href="#GMailAccess">How do I access GMail using MailKit?</a></li><li><a href="#GMailOAuth2">How can I log in to a GMail account using OAuth 2.0?</a></li><li><a href="#CreateAttachments">How do I create a message with attachments?</a></li><li><a href="#MessageBody">How do I get the main body of a message?</a></li><li><a href="#HasAttachments">How do I tell if a message has attachments?</a></li><li><a href="#Serialize">Why doesn't the MimeMessage class implement ISerializable so that I can serialize a message to disk and read it back later?</a></li><li><a href="#SaveMessages">How do I save messages?</a></li><li><a href="#SaveAttachments">How do I save attachments?</a></li><li><a href="#AddressHeaders">How do I get the email addresses in the From, To, and Cc headers?</a></li><li><a href="#UntitledAttachments">Why do attachments with unicode filenames appear as "ATT0####.dat" in Outlook?</a></li><li><a href="#DecryptInlinePGP">How do I decrypt PGP messages that are embedded in the main message text?</a></li><li><a href="#Reply">How do I reply to a message using MimeKit?</a></li><li><a href="#Forward">How do I forward a message?</a></li><li><a href="#UnreadMessages">How do I get all of the unread messages in a folder?</a></li><li><a href="#ParseWebRequestFormData">How would I parse multipart/form-data from an HTTP web request?</a></li></ul></div><div class="collapsibleAreaRegion" id="CompletelyFree"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDCAB')" onkeypress="SectionExpandCollapse_CheckKey('IDCAB', event)" tabindex="0"><img id="IDCABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Are MimeKit and MailKit completely free? Can I use them in my proprietary product(s)?</span></div><div id="IDCABSection" class="collapsibleSection"><p>
          Yes. MimeKit and MailKit are both completely free and open source. They are both covered under
          the
          <a href="https://opensource.org/licenses/MIT" target="_blank" rel="noopener noreferrer">MIT</a> license.
        </p></div><div class="collapsibleAreaRegion" id="SslHandshakeException"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDDAB')" onkeypress="SectionExpandCollapse_CheckKey('IDDAB', event)" tabindex="0"><img id="IDDABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Why do I get "An error occurred while attempting to establish an SSL or TLS connection." when I try to Connect?</span></div><div id="IDDABSection" class="collapsibleSection"><p>
          When you get an exception with that error message, it usually means that you are encountering
          one of the following scenarios:
        </p><ol><li><p>The mail server does not support SSL on the specified port.</p><p>
              There are 2 different ways to use SSL/TLS encryption with mail servers.
            </p><p>
              The first way is to enable SSL/TLS encryption immediately upon connecting to the
              SMTP, POP3 or IMAP server. This method requires an "SSL port" because the standard
              port defined for the protocol is meant for plain-text communication.
            </p><p>
              The second way is via a <span class="literal">STARTTLS</span> command (aka <span class="literal">STLS</span> for POP3) that is
              <em>optionally</em> supported by the server.
            </p><p>
              Below is a table of the protocols supported by MailKit and the standard plain-text ports
              (which either do not support any SSL/TLS encryption at all or only via the <span class="literal">STARTTLS</span>
              command extension) and the SSL ports which require SSL/TLS encryption immediately upon a
              successful connection to the remote host.
            </p><table><tr><th><p>Protocol</p></th><th><p>Standard Port</p></th><th><p>SSL Port</p></th></tr><tr><td><p>SMTP</p></td><td><p>25 or 587</p></td><td><p>465</p></td></tr><tr><td><p>POP3</p></td><td><p>110</p></td><td><p>995</p></td></tr><tr><td><p>IMAP</p></td><td><p>143</p></td><td><p>993</p></td></tr></table><p>
              It is important to use the correct <a href="T_MailKit_Security_SecureSocketOptions.htm">SecureSocketOptions</a> for
              the port that you are connecting to.
            </p><p>
              If you are connecting to one of the standard ports above, you will need to use <span class="literal">SecureSocketOptions.None</span>,
              <span class="literal">SecureSocketOptions.StartTls</span> or <span class="literal">SecureSocketOptions.StartTlsWhenAvailable</span>.
            </p><p>
              If you are connecting to one of the SSL ports, you will need to use <span class="literal">SecureSocketOptions.SslOnConnect</span>.
            </p><p>
              You could also try using <span class="literal">SecureSocketOptions.Auto</span> which works by choosing the appropriate option to use
              by comparing the specified port to the ports in the above table.
            </p></li><li><p>The mail server that you are connecting to is using an expired (or otherwise untrusted) SSL certificate.</p><p>
              Often times, mail servers will use self-signed certificates instead of using a certificate that
              has been signed by a trusted Certificate Authority. Another potential pitfall is when locally
              installed anti-virus software replaces the certificate in order to scan web traffic for viruses.
            </p><p>
              When your system is unable to validate the mail server's certificate because it is not signed
              by a known and trusted Certificate Authority, the above error will occur.
            </p><p>
              You can work around this problem by supplying a custom
              <a href="https://msdn.microsoft.com/en-us/library/ms145054" target="_blank" rel="noopener noreferrer">RemoteServerCertificateValidationCallback</a>
              and setting it on the client's <a href="P_MailKit_MailService_ServerCertificateValidationCallback.htm">ServerCertificateValidationCallback</a>
              property.
            </p><p>
              In the simplest example, you could do something like this (although I would strongly recommend against it in
              production use):
            </p><div id="IDFBBBDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDFBBBDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDFBBBDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDFBBBDAB');return false;" title="Copy">Copy</a></div></div><div id="IDFBBBDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
    client.ServerCertificateValidationCallback = (s,c,h,e) =&gt; <span class="highlight-keyword">true</span>;

    client.Connect (hostName, port, SecureSocketOptions.Auto);

    <span class="highlight-comment">// ...</span>
}</pre></div></div></div><p>
              A better solution might be to compare the certificate's common name, issuer, serial number, and fingerprint
              to known values to make sure that the certificate can be trusted. Take the following code snippet as an
              example of how to do this:
            </p><div id="IDHBBBDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDHBBBDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDHBBBDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDHBBBDAB');return false;" title="Copy">Copy</a></div></div><div id="IDHBBBDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">bool</span> MyServerCertificateValidationCallback (<span class="highlight-keyword">object</span> sender, X509Certificate certificate, X509Chain chain, SslPolicyErrors sslPolicyErrors)
{
    <span class="highlight-keyword">if</span> (sslPolicyErrors == SslPolicyErrors.None)
        <span class="highlight-keyword">return</span> <span class="highlight-keyword">true</span>;

    <span class="highlight-comment">// Note: The following code casts to an X509Certificate2 because it's easier to get the</span>
    <span class="highlight-comment">// values for comparison, but it's possible to get them from an X509Certificate as well.</span>
    <span class="highlight-keyword">if</span> (certificate <span class="highlight-keyword">is</span> X509Certificate2 certificate2) {
        <span class="highlight-keyword">var</span> cn = certificate2.GetNameInfo (X509NameType.SimpleName, <span class="highlight-keyword">false</span>);
        <span class="highlight-keyword">var</span> fingerprint = certificate2.Thumbprint;
        <span class="highlight-keyword">var</span> serial = certificate2.SerialNumber;
        <span class="highlight-keyword">var</span> issuer = certificate2.Issuer;

        <span class="highlight-keyword">return</span> cn == <span class="highlight-literal">"imap.gmail.com"</span> &amp;&amp; issuer == <span class="highlight-literal">"CN=GTS CA 1O1, O=Google Trust Services, C=US"</span> &amp;&amp;
            serial == <span class="highlight-literal">"00BABE95B167C9ECAF08000000006065B6"</span> &amp;&amp;
            fingerprint == <span class="highlight-literal">"E79A011EF55EEC72D2B7E391D193761372796836"</span>;
    }

    <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
}</pre></div></div></div><p>
              The downside of the above example is that it requires hard-coding known values for "trusted" mail server
              certificates which can quickly become unweildy to deal with if your program is meant to be used with
              a wide range of mail servers.
            </p><p>
              The best approach would be to prompt the user with a dialog explaining that the certificate is
              not trusted for the reasons enumerated by the
              <a href="https://docs.microsoft.com/en-us/dotnet/api/system.net.security.sslpolicyerrors?view=netframework-4.8" target="_blank" rel="noopener noreferrer">SslPolicyErrors</a>
              argument as well as potentially the errors provided in the
              <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.cryptography.x509certificates.x509chain?view=netframework-4.8" target="_blank" rel="noopener noreferrer">X509Chain</a>
              If the user wishes to accept the risks of trusting the certificate, your program could then <span class="literal">return true</span>.
            </p><p>
              For more details on writing a custom SSL certificate validation callback, it may be worth checking out the
              <a href="https://github.com/jstedfast/MailKit/blob/master/Documentation/Examples/SslCertificateValidation.cs" target="_blank" rel="noopener noreferrer">SslCertificateValidation.cs</a>
              example.
            </p></li><li><p>A Certificate Authority CRL server for one or more of the certificates in the chain is temporarily unavailable.</p><p>
              Most Certificate Authorities are probably pretty good at keeping their CRL and/or OCSP servers up 24/7, but occasionally
              they <em>do</em> go down or are otherwise unreachable due to other network problems between you and the
              server. When this happens, it becomes impossible to check the revocation status of one or more of the certificates in the chain.
            </p><p>
              To ignore revocation checks, you can set the
              <a href="P_MailKit_MailService_CheckCertificateRevocation.htm">CheckCertificateRevocation</a>
              property of the IMAP, POP3 or SMTP client to <span class="literal">false</span> before you connect:
            </p><div id="IDDCBBDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDDCBBDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDDCBBDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDDCBBDAB');return false;" title="Copy">Copy</a></div></div><div id="IDDCBBDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
    client.CheckCertificateRevocation = <span class="highlight-keyword">false</span>;

    client.Connect (hostName, port, SecureSocketOptions.Auto);

    <span class="highlight-comment">// ...</span>
}</pre></div></div></div></li><li><p>The server does not support the same set of SSL/TLS protocols that the client is configured to use.</p><p>
              MailKit attempts to keep up with the latest security recommendations and so is continuously removing older SSL and TLS
              protocols that are no longer considered secure from the default configuration. This often means that MailKit's SMTP,
              POP3 and IMAP clients will fail to connect to servers that are still using older SSL and TLS protocols. Currently,
              the SSL and TLS protocols that are not supported by default are: SSL v2.0, SSL v3.0, TLS v1.0 and TLS v1.1.
            </p><p>
              You can override MailKit's default set of supported
              <a href="https://docs.microsoft.com/en-us/dotnet/api/system.security.authentication.sslprotocols?view=netframework-4.8" target="_blank" rel="noopener noreferrer">SSL and TLS protocols</a>
              by setting the value of the <a href="P_MailKit_MailService_SslProtocols.htm">SslProtocols</a>
              property on your SMTP, POP3 or IMAP client.
            </p><p>For example:</p><div id="IDEDBBDAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDEDBBDAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDEDBBDAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDEDBBDAB');return false;" title="Copy">Copy</a></div></div><div id="IDEDBBDAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> SmtpClient ()) {
    <span class="highlight-comment">// Allow SSLv3.0 and all versions of TLS</span>
    client.SslProtocols = SslProtocols.Ssl3 | SslProtocols.Tls | SslProtocols.Tls11 | SslProtocols.Tls12 | SslProtocols.Tls13;

    client.Connect (<span class="highlight-literal">"smtp.gmail.com"</span>, <span class="highlight-number">465</span>, <span class="highlight-keyword">true</span>);

    <span class="highlight-comment">// ...</span>
}</pre></div></div></div></li></ol></div><div class="collapsibleAreaRegion" id="ProtocolLog"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDEAB')" onkeypress="SectionExpandCollapse_CheckKey('IDEAB', event)" tabindex="0"><img id="IDEABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I debug SMTP, POP3 and/or IMAP errors?</span></div><div id="IDEABSection" class="collapsibleSection"><p>
          All of MailKit's client implementations have a constructor that takes a nifty
          <a href="T_MailKit_IProtocolLogger.htm">IProtocolLogger</a> interface for logging client/server communications.
          Out of the box, you can use the handy <a href="T_MailKit_ProtocolLogger.htm">ProtocolLogger</a> class. Here are
          some examples of how to use it:
        </p><div id="IDBBEAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBBEAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBBEAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBBEAB');return false;" title="Copy">Copy</a></div></div><div id="IDBBEAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// log to a file called 'imap.log'</span>
<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> ImapClient (<span class="highlight-keyword">new</span> ProtocolLogger (<span class="highlight-literal">"imap.log"</span>));

<span class="highlight-comment">// log to standard output (i.e. the console)</span>
<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> ImapClient (<span class="highlight-keyword">new</span> ProtocolLogger (Console.OpenStandardOutput ()));</pre></div></div></div><p>
          Note: When submitting a protocol log as part of a bug report, make sure to scrub any sensitive
          information including your authentication credentials. This information will generally be the base64
          encoded blob immediately following an <span class="literal">AUTHENTICATE</span> or <span class="literal">AUTH</span> command
          (depending on the type of server) or the cleartext username and password strings in a <span class="literal">LOGIN</span> command.
          The only exception to this case is if you are authenticating with <span class="literal">NTLM</span> in which case I may need this
          information, but only if the bug/error is in the authentication step.
        </p></div><div class="collapsibleAreaRegion" id="GMailHiddenMessages"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDFAB')" onkeypress="SectionExpandCollapse_CheckKey('IDFAB', event)" tabindex="0"><img id="IDFABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Why don't I see some of my messages when accessing GMail with POP3?</span></div><div id="IDFABSection" class="collapsibleSection"><p>
          By default, GMail's POP3 server does not behave like a standard POP3 server and hides messages
          from clients (as well as having other non-standard behavior) that have already been viewed.
        </p><p>
          If you want to configure your GMail POP3 settings to behave the way POP3 is intended to behave,
          you'll need to log in to your GMail account via your web browser and navigate to the
          <strong>Forwarding and POP/IMAP</strong> tab of your
          <strong>GMail Settings</strong> page and make the following changes in the
          <strong>POP3 Download</strong> section:
        </p><ol><li><p><strong>Enable POP for all mail (even if it has already been downloaded)</strong>.
            </p></li><li><p>
              When messages are accessed with POP, <strong>keep GMail's copy in the Inbox</strong>.
            </p></li></ol></div><div class="collapsibleAreaRegion" id="GMailAccess"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDGAB')" onkeypress="SectionExpandCollapse_CheckKey('IDGAB', event)" tabindex="0"><img id="IDGABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I access GMail using MailKit?</span></div><div id="IDGABSection" class="collapsibleSection"><p>
          The first thing that you will need to do is to configure your GMail account to
          <a href="https://www.google.com/settings/security/lesssecureapps" target="_blank" rel="noopener noreferrer">enable less secure apps</a>, or you'll need to use OAuth 2.0 authentication (which is a bit more complex).
        </p><p>
          Then, assuming that your GMail account is <span class="literal">user@gmail.com</span>, you would use the following
          code snippet to connect to GMail via IMAP:
        </p><div id="IDCBGAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDCBGAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDCBGAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDCBGAB');return false;" title="Copy">Copy</a></div></div><div id="IDCBGAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> ImapClient ()) {
    client.Connect (<span class="highlight-literal">"imap.gmail.com"</span>, <span class="highlight-number">993</span>, SecureSocketOptions.SslOnConnect);
    client.Authenticate (<span class="highlight-literal">"user@gmail.com"</span>, <span class="highlight-literal">"password"</span>);

    <span class="highlight-comment">// do stuff...</span>

    client.Disconnect (<span class="highlight-keyword">true</span>);
}</pre></div></div></div><p>
          Connecting via POP3 or SMTP is identical except for the host names and ports (and, of course, you'd
          use a Pop3Client or SmtpClient as appropriate).
        </p></div><div class="collapsibleAreaRegion" id="GMailOAuth2"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDHAB')" onkeypress="SectionExpandCollapse_CheckKey('IDHAB', event)" tabindex="0"><img id="IDHABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How can I log in to a GMail account using OAuth 2.0?</span></div><div id="IDHABSection" class="collapsibleSection"><p>
          The first thing you need to do is follow
          <a href="https://developers.google.com/accounts/docs/OAuth2" target="_blank" rel="noopener noreferrer">Google's instructions</a>
          for obtaining OAuth 2.0 credentials for your application.
        </p><p>
          Or, as an alternative set of step-by-step instructions, you can follow the directions that
          <a href="https://github.com/jstedfast/MailKit/blob/master/GMailOAuth2.md" target="_blank" rel="noopener noreferrer">I have written</a> (complete with screenshots).
        </p><p>
          Once you've done that, the easiest way to obtain an access token is to use Google's 
          <a href="https://www.nuget.org/packages/Google.Apis.Auth/" target="_blank" rel="noopener noreferrer">Google.Apis.Auth</a> library:
        </p><div id="IDDBHAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDDBHAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDDBHAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDDBHAB');return false;" title="Copy">Copy</a></div></div><div id="IDDBHAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">const</span> <span class="highlight-keyword">string</span> GMailAccount = <span class="highlight-literal">"username@gmail.com"</span>;

<span class="highlight-keyword">var</span> clientSecrets = <span class="highlight-keyword">new</span> ClientSecrets {
    ClientId = <span class="highlight-literal">"XXX.apps.googleusercontent.com"</span>,
    ClientSecret = <span class="highlight-literal">"XXX"</span>
};

<span class="highlight-keyword">var</span> codeFlow = <span class="highlight-keyword">new</span> GoogleAuthorizationCodeFlow (<span class="highlight-keyword">new</span> GoogleAuthorizationCodeFlow.Initializer {
    <span class="highlight-comment">// Cache tokens in ~/.local/share/google-filedatastore/CredentialCacheFolder on Linux/Mac</span>
    DataStore = <span class="highlight-keyword">new</span> FileDataStore (<span class="highlight-literal">"CredentialCacheFolder"</span>, <span class="highlight-keyword">false</span>),
    Scopes = <span class="highlight-keyword">new</span> [] { <span class="highlight-literal">"https://mail.google.com/"</span> },
    ClientSecrets = clientSecrets
});

<span class="highlight-keyword">var</span> codeReceiver = <span class="highlight-keyword">new</span> LocalServerCodeReceiver ();
<span class="highlight-keyword">var</span> authCode = <span class="highlight-keyword">new</span> AuthorizationCodeInstalledApp (codeFlow, codeReceiver);
<span class="highlight-keyword">var</span> credential = <span class="highlight-keyword">await</span> authCode.AuthorizeAsync (GMailAccount, CancellationToken.None);

<span class="highlight-keyword">if</span> (authCode.ShouldRequestAuthorizationCode (credential.Token))
    <span class="highlight-keyword">await</span> credential.RefreshTokenAsync (CancellationToken.None);

<span class="highlight-keyword">var</span> oauth2 = <span class="highlight-keyword">new</span> SaslMechanismOAuth2 (credential.UserId, credential.Token.AccessToken);

<span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> client = <span class="highlight-keyword">new</span> ImapClient ()) {
    <span class="highlight-keyword">await</span> client.ConnectAsync (<span class="highlight-literal">"imap.gmail.com"</span>, <span class="highlight-number">993</span>, SecureSocketOptions.SslOnConnect);
    <span class="highlight-keyword">await</span> client.AuthenticateAsync (oauth2);
    <span class="highlight-keyword">await</span> client.DisconnectAsync (<span class="highlight-keyword">true</span>);
}</pre></div></div></div></div><div class="collapsibleAreaRegion" id="CreateAttachments"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDIAB')" onkeypress="SectionExpandCollapse_CheckKey('IDIAB', event)" tabindex="0"><img id="IDIABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I create a message with attachments?</span></div><div id="IDIABSection" class="collapsibleSection"><p>
          To construct a message with attachments, the first thing you'll need to do is create a
          <span class="literal">multipart/mixed</span> container which you'll then want to add the message
          body to first. Once you've added the body, you can then add MIME parts to it that contain
          the content of the files you'd like to attach, being sure to set the
          <span class="literal">Content-Disposition</span> header value to <span class="literal">attachment</span>.
          You'll probably also want to set the <span class="literal">filename</span> parameter on the
          <span class="literal">Content-Disposition</span> header as well as the <span class="literal">name</span>
          parameter on the <span class="literal">Content-Type</span> header. The most convenient way to do this
          is to use the <a href="P_MimeKit_MimePart_FileName.htm">MimePart<span id="LSTDEDCC356_0" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>FileName</a> property which will set both parameters
          for you as well as setting the <span class="literal">Content-Disposition</span> header value to
          <span class="literal">attachment</span> if it has not already been set to something else.
        </p><div id="IDBBIAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBBIAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBBIAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBBIAB');return false;" title="Copy">Copy</a></div></div><div id="IDBBIAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
message.From.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Joey"</span>, <span class="highlight-literal">"joey@friends.com"</span>));
message.To.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Alice"</span>, <span class="highlight-literal">"alice@wonderland.com"</span>));
message.Subject = <span class="highlight-literal">"How you doin?"</span>;

<span class="highlight-comment">// create our message text, just like before (except don't set it as the message.Body)</span>
<span class="highlight-keyword">var</span> body = <span class="highlight-keyword">new</span> TextPart (<span class="highlight-literal">"plain"</span>) {
    Text = <span class="highlight-literal">@"Hey Alice,

What are you up to this weekend? Monica is throwing one of her parties on
Saturday and I was hoping you could make it.

Will you be my +1?

-- Joey
"</span>
};

<span class="highlight-comment">// create an image attachment for the file located at path</span>
<span class="highlight-keyword">var</span> attachment = <span class="highlight-keyword">new</span> MimePart (<span class="highlight-literal">"image"</span>, <span class="highlight-literal">"gif"</span>) {
    Content = <span class="highlight-keyword">new</span> MimeContent (File.OpenRead (path), ContentEncoding.Default),
    ContentDisposition = <span class="highlight-keyword">new</span> ContentDisposition (ContentDisposition.Attachment),
    ContentTransferEncoding = ContentEncoding.Base64,
    FileName = Path.GetFileName (path)
};

<span class="highlight-comment">// now create the multipart/mixed container to hold the message text and the</span>
<span class="highlight-comment">// image attachment</span>
<span class="highlight-keyword">var</span> multipart = <span class="highlight-keyword">new</span> Multipart (<span class="highlight-literal">"mixed"</span>);
multipart.Add (body);
multipart.Add (attachment);

<span class="highlight-comment">// now set the multipart/mixed as the message body</span>
message.Body = multipart;</pre></div></div></div><p>
          A simpler way to construct messages with attachments is to take advantage of the
          <a href="T_MimeKit_BodyBuilder.htm">BodyBuilder</a> class.
        </p><div id="IDDBIAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDDBIAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDDBIAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDDBIAB');return false;" title="Copy">Copy</a></div></div><div id="IDDBIAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">            <span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
            message.From.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Joey"</span>, <span class="highlight-literal">"joey@friends.com"</span>));
            message.To.Add (<span class="highlight-keyword">new</span> MailboxAddress (<span class="highlight-literal">"Alice"</span>, <span class="highlight-literal">"alice@wonderland.com"</span>));
            message.Subject = <span class="highlight-literal">"How you doin?"</span>;

            <span class="highlight-keyword">var</span> builder = <span class="highlight-keyword">new</span> BodyBuilder ();

            <span class="highlight-comment">// Set the plain-text version of the message text</span>
            builder.TextBody = <span class="highlight-literal">@"Hey Alice,

What are you up to this weekend? Monica is throwing one of her parties on
Saturday and I was hoping you could make it.

Will you be my +1?

-- Joey
"</span>;

            <span class="highlight-comment">// We may also want to attach a calendar event for Monica's party...</span>
            builder.Attachments.Add (<span class="highlight-literal">@"C:\Users\Joey\Documents\party.ics"</span>);

            <span class="highlight-comment">// Now we just need to set the message body and we're done</span>
            message.Body = builder.ToMessageBody ();</pre></div></div></div><p>
          For more information, see <a href="Creating-Messages.htm">Creating Messages</a>.
        </p></div><div class="collapsibleAreaRegion" id="MessageBody"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDJAB')" onkeypress="SectionExpandCollapse_CheckKey('IDJAB', event)" tabindex="0"><img id="IDJABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I get the main body of a message?</span></div><div id="IDJABSection" class="collapsibleSection"><p>
          (Note: for the TL;DR version, skip to the end)
        </p><p>
          MIME is a tree structure of parts. There are multiparts which contain other parts
          (even other multiparts). There are message parts which contain messages. And finally,
          there are leaf-node parts which contain content.
        </p><p>
          There are a few common message structures:
        </p><ol><li id="MessageBodyExample1"><p>
              The message contains only a <span class="literal">text/plain</span> or
              <span class="literal">text/html</span> part (easy, just use that).
            </p></li><li id="MessageBodyExample2"><p>
              The message contains a <span class="literal">multipart/alternative</span>
              which will typically look a bit like this:<pre>
multipart/alternative
  text/plain
  text/html</pre></p></li><li id="MessageBodyExample3"><p>
              Same as above, but the html part is inside a <span class="literal">multipart/related</span> so
              that it can embed images:<pre>
multipart/alternative
  text/plain
  multipart/related
    text/html
    image/jpeg
    image/png</pre></p></li><li id="MessageBodyExample4"><p>
              The message contains a textual body part as well as some attachments:<pre>
multipart/mixed
  text/plain
  application/octet-stream
  application/zip</pre></p></li><li id="MessageBodyExample5"><p>
              The same as above, but with the first part replaced with either
              <a href="Frequently-Asked-Questions.htm#MessageBodyExample2">#2</a> or
              <a href="Frequently-Asked-Questions.htm#MessageBodyExample3">#3</a>
              To illustrate:<pre>
multipart/mixed
  multipart/alternative
    text/plain
    text/html
  application/octet-stream
  application/zip</pre></p><p>
              Or:<pre>
multipart/mixed
  multipart/alternative
    text/plain
    multipart/related
      text/html
      image/jpeg
      image/png
  application/octet-stream
  application/zip</pre></p></li></ol><p>
          For your convenience, the <a href="T_MimeKit_MimeMessage.htm">MimeMessage</a>
          class has 2 properties that you may find useful:
          <a href="P_MimeKit_MimeMessage_TextBody.htm">TextBody</a> and
          <a href="P_MimeKit_MimeMessage_HtmlBody.htm">HtmlBody</a>.
        </p><p>
          For more information, see <a href="Working-With-Messages.htm">Working with messages</a>.
        </p></div><div class="collapsibleAreaRegion" id="HasAttachments"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDKAB')" onkeypress="SectionExpandCollapse_CheckKey('IDKAB', event)" tabindex="0"><img id="IDKABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I tell if a message has attachments?</span></div><div id="IDKABSection" class="collapsibleSection"><p>
          In most cases, a message with a body that has a MIME-type of <span class="literal">multipart/mixed</span>
          containing more than a single part probably has attachments. As illustrated above, the first part
          of a <span class="literal">multipart/mixed</span> is typically the textual body of the message, but it is
          not always quite that simple.
        </p><p>
          In general, MIME attachments will have a <span class="literal">Content-Disposition</span> header with a
          value of <span class="literal">attachment</span>. To get the list of body parts matching this criteria,
          you can use the <a href="P_MimeKit_MimeMessage_Attachments.htm">MimeMessage<span id="LSTDEDCC356_1" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Attachments</a> property.
        </p><p>
          Unfortunately, not all mail clients follow this convention and so you may need to write your
          own custom logic. For example, you may wish to treat all body parts having a <span class="literal">name</span>
          or <span class="literal">filename</span> parameter set on them:
        </p><div id="IDDBKAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDDBKAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDDBKAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDDBKAB');return false;" title="Copy">Copy</a></div></div><div id="IDDBKAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> attachments = message.BodyParts.OfType&lt;MimePart&gt; ().Where (part =&gt; !<span class="highlight-keyword">string</span>.IsNullOrEmpty (part.FileName));</pre></div></div></div><p>
          A more sophisticated approach is to treat body parts not referenced by the main textual body part of
          the message as attachments. In other words, treat any body part not used for rendering the message
          as an attachment. For an example on how to do this, consider the following code snippets:
        </p><div id="IDFBKAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDFBKAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDFBKAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDFBKAB');return false;" title="Copy">Copy</a></div></div><div id="IDFBKAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">/// &lt;summary&gt;</span>
<span class="highlight-comment">/// Visits a MimeMessage and generates HTML suitable to be rendered by a browser control.</span>
<span class="highlight-comment">/// &lt;/summary&gt;</span>
<span class="highlight-keyword">class</span> HtmlPreviewVisitor : MimeVisitor
{
    List&lt;MultipartRelated&gt; stack = <span class="highlight-keyword">new</span> List&lt;MultipartRelated&gt; ();
    List&lt;MimeEntity&gt; attachments = <span class="highlight-keyword">new</span> List&lt;MimeEntity&gt; ();
    <span class="highlight-keyword">string</span> body;

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Creates a new HtmlPreviewVisitor.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> HtmlPreviewVisitor ()
    {
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// The list of attachments that were in the MimeMessage.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> IList&lt;MimeEntity&gt; Attachments {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> attachments; }
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// The HTML string that can be set on the BrowserControl.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">string</span> HtmlBody {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> body ?? <span class="highlight-keyword">string</span>.Empty; }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartAlternative (MultipartAlternative alternative)
    {
        <span class="highlight-comment">// walk the multipart/alternative children backwards from greatest level of faithfulness to the least faithful</span>
        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = alternative.Count - <span class="highlight-number">1</span>; i &gt;= <span class="highlight-number">0</span> &amp;&amp; body == <span class="highlight-keyword">null</span>; i--)
            alternative[i].Accept (<span class="highlight-keyword">this</span>);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartRelated (MultipartRelated related)
    {
        <span class="highlight-keyword">var</span> root = related.Root;

        <span class="highlight-comment">// push this multipart/related onto our stack</span>
        stack.Add (related);

        <span class="highlight-comment">// visit the root document</span>
        root.Accept (<span class="highlight-keyword">this</span>);

        <span class="highlight-comment">// pop this multipart/related off our stack</span>
        stack.RemoveAt (stack.Count - <span class="highlight-number">1</span>);
    }

    <span class="highlight-comment">// look up the image based on the img src url within our multipart/related stack</span>
    <span class="highlight-keyword">bool</span> TryGetImage (<span class="highlight-keyword">string</span> url, <span class="highlight-keyword">out</span> MimePart image)
    {
        UriKind kind;
        <span class="highlight-keyword">int</span> index;
        Uri uri;

        <span class="highlight-keyword">if</span> (Uri.IsWellFormedUriString (url, UriKind.Absolute))
            kind = UriKind.Absolute;
        <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (Uri.IsWellFormedUriString (url, UriKind.Relative))
            kind = UriKind.Relative;
        <span class="highlight-keyword">else</span>
            kind = UriKind.RelativeOrAbsolute;

        <span class="highlight-keyword">try</span> {
            uri = <span class="highlight-keyword">new</span> Uri (url, kind);
        } <span class="highlight-keyword">catch</span> {
            image = <span class="highlight-keyword">null</span>;
            <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
        }

        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = stack.Count - <span class="highlight-number">1</span>; i &gt;= <span class="highlight-number">0</span>; i--) {
            <span class="highlight-keyword">if</span> ((index = stack[i].IndexOf (uri)) == <span class="highlight-number">-1</span>)
                <span class="highlight-keyword">continue</span>;

            image = stack[i][index] <span class="highlight-keyword">as</span> MimePart;
            <span class="highlight-keyword">return</span> image != <span class="highlight-keyword">null</span>;
        }

        image = <span class="highlight-keyword">null</span>;

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">false</span>;
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Get a data: URI for the image attachment.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;remarks&gt;</span>
    <span class="highlight-comment">/// Encodes the image attachment into a string suitable for setting as a src= attribute value in</span>
    <span class="highlight-comment">/// an img tag.</span>
    <span class="highlight-comment">/// &lt;/remarks&gt;</span>
    <span class="highlight-comment">/// &lt;returns&gt;The data: URI.&lt;/returns&gt;</span>
    <span class="highlight-comment">/// &lt;param name="image"&gt;The image attachment.&lt;/param&gt;</span>
    <span class="highlight-keyword">string</span> GetDataUri (MimePart image)
    {
        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> memory = <span class="highlight-keyword">new</span> MemoryStream ()) {
            image.Content.DecodeTo (memory);
            <span class="highlight-keyword">var</span> buffer = memory.GetBuffer ();
            <span class="highlight-keyword">var</span> length = (<span class="highlight-keyword">int</span>) memory.Length;
            <span class="highlight-keyword">var</span> base64 = Convert.ToBase64String (buffer, <span class="highlight-number">0</span>, length);

            <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"data:{0};base64,{1}"</span>, image.ContentType.MimeType, base64);
        }
    }

    <span class="highlight-comment">// Replaces &lt;img src=...&gt; urls that refer to images embedded within the message with</span>
    <span class="highlight-comment">// "file://" urls that the browser control will actually be able to load.</span>
    <span class="highlight-keyword">void</span> HtmlTagCallback (HtmlTagContext ctx, HtmlWriter htmlWriter)
    {
        <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Meta &amp;&amp; !ctx.IsEndTag) {
            <span class="highlight-keyword">bool</span> isContentType = <span class="highlight-keyword">false</span>;

            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// replace charsets with "utf-8" since our output will be in utf-8 (and not whatever the original charset was)</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.Charset) {
                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (<span class="highlight-literal">"utf-8"</span>);
                } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (isContentType &amp;&amp; attribute.Id == HtmlAttributeId.Content) {
                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (<span class="highlight-literal">"text/html; charset=utf-8"</span>);
                } <span class="highlight-keyword">else</span> {
                    <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.HttpEquiv &amp;&amp; attribute.Value != <span class="highlight-keyword">null</span>
                        &amp;&amp; attribute.Value.Equals (<span class="highlight-literal">"Content-Type"</span>, StringComparison.OrdinalIgnoreCase))
                        isContentType = <span class="highlight-keyword">true</span>;

                    htmlWriter.WriteAttribute (attribute);
                }
            }
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Image &amp;&amp; !ctx.IsEndTag &amp;&amp; stack.Count &gt; <span class="highlight-number">0</span>) {
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// replace the src attribute with a "data:" URL</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Id == HtmlAttributeId.Src) {
                    <span class="highlight-keyword">if</span> (!TryGetImage (attribute.Value, <span class="highlight-keyword">out</span> <span class="highlight-keyword">var</span> image)) {
                        htmlWriter.WriteAttribute (attribute);
                        <span class="highlight-keyword">continue</span>;
                    }

                    <span class="highlight-keyword">var</span> dataUri = GetDataUri (image);

                    htmlWriter.WriteAttributeName (attribute.Name);
                    htmlWriter.WriteAttributeValue (dataUri);
                } <span class="highlight-keyword">else</span> {
                    htmlWriter.WriteAttribute (attribute);
                }
            }
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Body &amp;&amp; !ctx.IsEndTag) {
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">false</span>);

            <span class="highlight-comment">// add and/or replace oncontextmenu="return false;"</span>
            <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attribute <span class="highlight-keyword">in</span> ctx.Attributes) {
                <span class="highlight-keyword">if</span> (attribute.Name.Equals (<span class="highlight-literal">"oncontextmenu"</span>, StringComparison.OrdinalIgnoreCase))
                    <span class="highlight-keyword">continue</span>;

                htmlWriter.WriteAttribute (attribute);
            }

            htmlWriter.WriteAttribute (<span class="highlight-literal">"oncontextmenu"</span>, <span class="highlight-literal">"return false;"</span>);
        } <span class="highlight-keyword">else</span> {
            <span class="highlight-comment">// pass the tag through to the output</span>
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">true</span>);
        }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTextPart (TextPart entity)
    {
        TextConverter converter;

        <span class="highlight-keyword">if</span> (body != <span class="highlight-keyword">null</span>) {
            <span class="highlight-comment">// since we've already found the body, treat this as an attachment</span>
            attachments.Add (entity);
            <span class="highlight-keyword">return</span>;
        }

        <span class="highlight-keyword">if</span> (entity.IsHtml) {
            converter = <span class="highlight-keyword">new</span> HtmlToHtml {
                HtmlTagCallback = HtmlTagCallback
            };
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (entity.IsFlowed) {
            <span class="highlight-keyword">var</span> flowed = <span class="highlight-keyword">new</span> FlowedToHtml ();
            <span class="highlight-keyword">string</span> delsp;

            <span class="highlight-keyword">if</span> (entity.ContentType.Parameters.TryGetValue (<span class="highlight-literal">"delsp"</span>, <span class="highlight-keyword">out</span> delsp))
                flowed.DeleteSpace = delsp.Equals (<span class="highlight-literal">"yes"</span>, StringComparison.OrdinalIgnoreCase);

            converter = flowed;
        } <span class="highlight-keyword">else</span> {
            converter = <span class="highlight-keyword">new</span> TextToHtml ();
        }

        body = converter.Convert (entity.Text);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTnefPart (TnefPart entity)
    {
        <span class="highlight-comment">// extract any attachments in the MS-TNEF part</span>
        attachments.AddRange (entity.ExtractAttachments ());
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMessagePart (MessagePart entity)
    {
        <span class="highlight-comment">// treat message/rfc822 parts as attachments</span>
        attachments.Add (entity);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMimePart (MimePart entity)
    {
        <span class="highlight-comment">// realistically, if we've gotten this far, then we can treat this as an attachment</span>
        <span class="highlight-comment">// even if the IsAttachment property is false.</span>
        attachments.Add (entity);
    }
}</pre></div></div></div><p>And the way you'd use this visitor might look something like this:</p><div id="IDHBKAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDHBKAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDHBKAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDHBKAB');return false;" title="Copy">Copy</a></div></div><div id="IDHBKAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">void</span> Render (MimeMessage message)
{
    <span class="highlight-keyword">var</span> tmpDir = Path.Combine (Path.GetTempPath (), message.MessageId);
    <span class="highlight-keyword">var</span> visitor = <span class="highlight-keyword">new</span> HtmlPreviewVisitor (tmpDir);

    Directory.CreateDirectory (tmpDir);

    message.Accept (visitor);

    DisplayHtml (visitor.HtmlBody);
    DisplayAttachments (visitor.Attachments);
}</pre></div></div></div><p>
          Once you've rendered the message using the above technique, you'll have a list of attachments
          that were not used, even if they did not match the simplistic criteria used by the
          <a href="P_MimeKit_MimeMessage_Attachments.htm">MimeMessage<span id="LSTDEDCC356_2" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Attachments</a>
          property.
        </p></div><div class="collapsibleAreaRegion" id="Serialize"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDLAB')" onkeypress="SectionExpandCollapse_CheckKey('IDLAB', event)" tabindex="0"><img id="IDLABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Why doesn't the MimeMessage class implement ISerializable so that I can serialize a message to disk and read it back later?</span></div><div id="IDLABSection" class="collapsibleSection"><p>
          The MimeKit API was designed to use the existing MIME format for serialization. In light
          of this, the ability to use the .NET serialization API and format did not make much sense
          to support.
        </p><p>
          You can easily serialize a MimeMessage to a stream using the
          <a href="Overload_MimeKit_MimeMessage_WriteTo.htm">WriteTo</a>
          methods.
        </p></div><div class="collapsibleAreaRegion" id="SaveMessages"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDMAB')" onkeypress="SectionExpandCollapse_CheckKey('IDMAB', event)" tabindex="0"><img id="IDMABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I save messages?</span></div><div id="IDMABSection" class="collapsibleSection"><p>
          One you've got a <a href="T_MimeKit_MimeMessage.htm">MimeMessage</a>, you can save it to a
          file using the <a href="Overload_MimeKit_MimeMessage_WriteTo.htm">WriteTo<span id="LSTDEDCC356_3" data-languageSpecificText="cs=()|vb=|cpp=()|nu=()|fs=()"></span></a> method:
        </p><div id="IDBBMAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBBMAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBBMAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBBMAB');return false;" title="Copy">Copy</a></div></div><div id="IDBBMAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">message.WriteTo (<span class="highlight-literal">"message.eml"</span>);</pre></div></div></div><p>
          The <span class="literal">WriteTo</span> method also has overloads that allow you to write the message to a
          <span class="literal">Stream</span> instead.
        </p><p>
          By default, the <span class="literal">WriteTo</span> method will save the message using DOS line-endings on Windows
          and Unix line-endings on Unix-based systems such as macOS and Linux. You can override this behavior by
          passing a <a href="T_MimeKit_FormatOptions.htm">FormatOptions</a> argument to the method:
        </p><div id="IDEBMAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDEBMAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDEBMAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDEBMAB');return false;" title="Copy">Copy</a></div></div><div id="IDEBMAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-comment">// clone the default formatting options</span>
<span class="highlight-keyword">var</span> format = FormatOptions.Default.Clone ();

<span class="highlight-comment">// override the line-endings to be DOS no matter what platform we are on</span>
format.NewLineFormat = NewLineFormat.Dos;

message.WriteTo (format, <span class="highlight-literal">"message.eml"</span>);</pre></div></div></div></div><div class="collapsibleAreaRegion" id="SaveAttachments"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDNAB')" onkeypress="SectionExpandCollapse_CheckKey('IDNAB', event)" tabindex="0"><img id="IDNABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I save attachments?</span></div><div id="IDNABSection" class="collapsibleSection"><p>
          If you've already got a <a href="T_MimeKit_MimePart.htm">MimePart</a> that represents
          the attachment that you'd like to save, here's how you might save it:
        </p><div id="IDBBNAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBBNAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBBNAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBBNAB');return false;" title="Copy">Copy</a></div></div><div id="IDBBNAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = File.Create (fileName))
    attachment.Content.DecodeTo (stream);</pre></div></div></div><p>
          Pretty simple, right?
        </p><p>
          But what if your attachment is actually a <a href="T_MimeKit_MessagePart.htm">MessagePart</a>?
        </p><p>
          To save the content of a <span class="literal">message/rfc822</span> part, you'd use the following code snippet:
        </p><div id="IDFBNAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDFBNAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDFBNAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDFBNAB');return false;" title="Copy">Copy</a></div></div><div id="IDFBNAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = File.Create (fileName))
    attachment.Message.WriteTo (stream);</pre></div></div></div><p>
          If you are iterating over all of the attachments in a message, you might do something like this:
        </p><div id="IDHBNAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDHBNAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDHBNAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDHBNAB');return false;" title="Copy">Copy</a></div></div><div id="IDHBNAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> attachment <span class="highlight-keyword">in</span> message.Attachments) {
    <span class="highlight-keyword">if</span> (attachment <span class="highlight-keyword">is</span> MessagePart) {
        <span class="highlight-keyword">var</span> fileName = attachment.ContentDisposition?.FileName;
        <span class="highlight-keyword">var</span> rfc822 = (MessagePart) attachment;

        <span class="highlight-keyword">if</span> (<span class="highlight-keyword">string</span>.IsNullOrEmpty (fileName))
            fileName = <span class="highlight-literal">"attached-message.eml"</span>;

        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = File.Create (fileName))
            rfc822.Message.WriteTo (stream);
    } <span class="highlight-keyword">else</span> {
        <span class="highlight-keyword">var</span> part = (MimePart) attachment;
        <span class="highlight-keyword">var</span> fileName = part.FileName;

        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = File.Create (fileName))
            part.Content.DecodeTo (stream);
    }
}</pre></div></div></div></div><div class="collapsibleAreaRegion" id="AddressHeaders"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDOAB')" onkeypress="SectionExpandCollapse_CheckKey('IDOAB', event)" tabindex="0"><img id="IDOABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I get the email addresses in the From, To, and Cc headers?</span></div><div id="IDOABSection" class="collapsibleSection"><p>
          The <a href="P_MimeKit_MimeMessage_From.htm">From</a>,
          <a href="P_MimeKit_MimeMessage_To.htm">To</a>, and
          <a href="P_MimeKit_MimeMessage_Cc.htm">Cc</a>
          properties of a <a href="T_MimeKit_MimeMessage.htm">MimeMessage</a>
          are all of type <a href="T_MimeKit_InternetAddressList.htm">InternetAddressList</a>.
          An <a href="T_MimeKit_InternetAddressList.htm">InternetAddressList</a> is a list of
          <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> items.
          This is where some people start to get lost, conceptually, because
          <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> is an
          abstract class that only really has a
          <a href="P_MimeKit_InternetAddress_Name.htm">Name</a>
          property.
        </p><p>
          As you've probably already discovered, the
          <a href="P_MimeKit_InternetAddress_Name.htm">Name</a>
          property contains the name of the person (if available), but what you probably
          want is his or her email address, not their name. So how do you get it?
        </p><p>
          To get the email address, you'll need to figure out what subclass of address each
          <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> really is.
          There are 2 direct subclasses of
          <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a>. They are:
          <a href="T_MimeKit_GroupAddress.htm">GroupAddress</a> and
          <a href="T_MimeKit_MailboxAddress.htm">MailboxAddress</a>.
        </p><p>
          A <a href="T_MimeKit_GroupAddress.htm">GroupAddress</a> is a named group
          of more <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> items that
          are contained within the
          <a href="P_MimeKit_GroupAddress_Members.htm">Members</a> property. To
          get an idea of what a group address represents, consider the following examples:
        </p><p><span class="literal">
            To: My Friends: Joey &lt;joey@friends.com&gt;, Monica &lt;monica@friends.com&gt;,
            "Mrs. Chanandler Bong" &lt;chandler@friends.com&gt;, Ross &lt;ross@friends.com&gt;,
            Rachel &lt;rachel@friends.com&gt;;
          </span></p><p>
          In the above example, the <a href="P_MimeKit_MimeMessage_To.htm">To</a>
          header's <a href="T_MimeKit_InternetAddressList.htm">InternetAddressList</a> will
          contain only 1 item which will be a
          <a href="T_MimeKit_GroupAddress.htm">GroupAddress</a> with a
          <a href="P_MimeKit_InternetAddress_Name.htm">Name</a> value of
          <span class="literal">My Friends</span>. The
          <a href="P_MimeKit_GroupAddress_Members.htm">Members</a> property of
          the <a href="T_MimeKit_GroupAddress.htm">GroupAddress</a> will contain 5
          more <a href="T_MimeKit_InternetAddress.htm">InternetAddress</a> items (which
          will all be instances of <a href="T_MimeKit_MailboxAddress.htm">MailboxAddress</a>).
        </p><p>
          The above example, however, is not very likely to ever be seen in messages you deal with.
          A far more common example would be the one below:
        </p><p><span class="literal">To: undisclosed-recipients:;</span></p><p>
          Most of the time, the <a href="P_MimeKit_MimeMessage_From.htm">From</a>,
          <a href="P_MimeKit_MimeMessage_To.htm">To</a>, and
          <a href="P_MimeKit_MimeMessage_Cc.htm">Cc</a> headers will only
          contain mailbox addresses. As you will notice, a
          <a href="T_MimeKit_MailboxAddress.htm">MailboxAddress</a> has an
          <a href="P_MimeKit_MailboxAddress_Address.htm">Address</a> property
          which will contain the email address of the mailbox. In the following example, the
          <a href="P_MimeKit_MailboxAddress_Address.htm">Address</a> property
          will contain the value <span class="literal">john@smith.com</span>:
        </p><p><span class="literal">To: John Smith &lt;john@smith.com&gt;</span></p><p>
          If you only care about getting a flattened list of the mailbox addresses in one of
          the address headers, you can do something like this:
        </p><div id="IDLBOAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDLBOAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDLBOAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDLBOAB');return false;" title="Copy">Copy</a></div></div><div id="IDLBOAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> mailbox <span class="highlight-keyword">in</span> message.To.Mailboxes)
    Console.WriteLine (<span class="highlight-literal">"{0}'s email address is {1}"</span>, mailbox.Name, mailbox.Address);</pre></div></div></div></div><div class="collapsibleAreaRegion" id="UntitledAttachments"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDPAB')" onkeypress="SectionExpandCollapse_CheckKey('IDPAB', event)" tabindex="0"><img id="IDPABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />Why do attachments with unicode filenames appear as "ATT0####.dat" in Outlook?</span></div><div id="IDPABSection" class="collapsibleSection"><p>
          An attachment filename is stored as a MIME parameter on the <span class="literal">Content-Disposition</span>
          header. Unfortunately, the original MIME specifications did not specify a method for encoding
          non-ascii filenames. In 1997,
          <a href="https://tools.ietf.org/html/rfc2184" target="_blank" rel="noopener noreferrer">rfc2184</a>
          (later updated by 
          <a href="https://tools.ietf.org/html/rfc2231" target="_blank" rel="noopener noreferrer">rfc2231</a>) was
          published which specified an encoding mechanism to use for encoding them. Since there was a window
          in time where the MIME specifications did not define a way to encode them, some mail client
          developers decided to use the mechanism described by
          <a href="https://tools.ietf.org/html/rfc2047" target="_blank" rel="noopener noreferrer">rfc2047</a> which was meant for encoding
          non-ASCII text in headers. While this may at first seem logical, the problem with this approach
          was that rfc2047 encoded-word tokens are not allowed to be in quotes (as well as some other issues)
          and so another, more appropriate, encoding mechanism was needed.
        </p><p>
          Outlook is one of those mail clients which decided to encode filenames using the mechanism described
          in rfc2047 and until Outlook 2007, did not support filenames encoded using the mechanism defined in
          rfc2231.
        </p><p>
          As of MimeKit v1.2.18, it is possible to configure MimeKit to use the rfc2047 encoding mechanism for
          filenames in the following two ways:
        </p><p>
          The first way is to set the encoding method on each individual
          <a href="T_MimeKit_Parameter.htm">Parameter</a>:
        </p><div id="IDEBPAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDEBPAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDEBPAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDEBPAB');return false;" title="Copy">Copy</a></div></div><div id="IDEBPAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Parameter param;

<span class="highlight-keyword">if</span> (attachment.ContentDisposition.Parameters.TryGetValue (<span class="highlight-literal">"filename"</span>, <span class="highlight-keyword">out</span> param))
    param.EncodingMethod = ParameterEncodingMethod.Rfc2047;</pre></div></div></div><p>
          The other way is to use a <a href="T_MimeKit_FormatOptions.htm">FormatOptions</a>:
        </p><div id="IDGBPAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDGBPAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDGBPAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDGBPAB');return false;" title="Copy">Copy</a></div></div><div id="IDGBPAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">var</span> options = FormatOptions.Default.Clone ();
options.ParameterEncodingMethod = ParameterEncodingMethod.Rfc2047;

message.WriteTo (options, stream);</pre></div></div></div></div><div class="collapsibleAreaRegion" id="DecryptInlinePGP"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDQAB')" onkeypress="SectionExpandCollapse_CheckKey('IDQAB', event)" tabindex="0"><img id="IDQABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I decrypt PGP messages that are embedded in the main message text?</span></div><div id="IDQABSection" class="collapsibleSection"><p>
          Some PGP-enabled mail clients, such as <strong>Thunderbird</strong>, embed
          encrypted PGP blurbs within the <span class="literal">text/plain</span> body of the message
          rather than using the PGP/MIME format that MimeKit prefers.
        </p><p>
          These messages often look something like this:
        </p><div id="IDCBQAB" class="codeSnippetContainer"><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDCBQAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDCBQAB');return false;" title="Copy">Copy</a></div></div><div id="IDCBQAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">Return-Path: &lt;pgp-enthusiast@example.com&gt;
Received: from [127.0.0.1] (hostname.example.com. [201.95.8.17])
    by mx.google.com with ESMTPSA id l67sm26628445yha.8.2014.04.27.13.49.44
    for &lt;pgp-enthusiast@example.com&gt;
    (version=TLSv1 cipher=ECDHE-RSA-RC4-SHA bits=128/128);
    Sun, 27 Apr 2014 13:49:44 -0700 (PDT)
Message-ID: &lt;535D6D67.8020803@example.com&gt;
Date: Sun, 27 Apr 2014 17:49:43 -0300
From: Die-Hard PGP Fan &lt;pgp-enthusiast@example.com&gt;
User-Agent: Mozilla/5.0 (Windows NT 6.3; WOW64; rv:24.0) Gecko/20100101 Thunderbird/24.4.0
MIME-Version: 1.0
To: undisclosed-recipients:;
Subject: Test of inline encrypted PGP blocks
X-Enigmail-Version: 1.6
Content-Type: text/plain; charset=ISO-8859-1
Content-Transfer-Encoding: 8bit
X-Antivirus: avast! (VPS 140427-1, 27/04/2014), Outbound message
X-Antivirus-Status: Clean

-----BEGIN PGP MESSAGE-----
Charset: ISO-8859-1
Version: GnuPG v2.0.22 (MingW32)
Comment: Using GnuPG with Thunderbird - http://www.enigmail.net/

SGFoISBJIGZvb2xlZCB5b3UsIHRoaXMgdGV4dCBpc24ndCBhY3R1YWxseSBlbmNy
eXB0ZWQgd2l0aCBQR1AsCml0J3MgYWN0dWFsbHkgb25seSBiYXNlNjQgZW5jb2Rl
ZCEKCkknbSBqdXN0IHVzaW5nIHRoaXMgYXMgYW4gZXhhbXBsZSwgdGhvdWdoLCBz
byBpdCBkb2Vzbid0IHJlYWxseSBtYXR0ZXIuCgpGb3IgdGhlIHNha2Ugb2YgYXJn
dW1lbnQsIHdlJ2xsIHByZXRlbmQgdGhhdCB0aGlzIGlzIGFjdHVhbGx5IGFuIGVu
Y3J5cHRlZApibHVyYi4gTW1ta2F5PyBUaGFua3MuCg==
-----END PGP MESSAGE-----</pre></div></div></div><p>
          To deal with these kinds of messages, MimeKit's
          <a href="T_MimeKit_Cryptography_OpenPgpContext.htm">OpenPgpContext</a>
          includes a
          <a href="M_MimeKit_Cryptography_OpenPgpContext_DecryptTo.htm">DecryptTo(Stream, Stream, CancellationToken)</a>
          method which can be used to get the raw decrypted stream.
        </p><p>
          The method variant that has a
          <a href="T_MimeKit_Cryptography_DigitalSignatureCollection.htm">DigitalSignatureCollection</a>
          output parameter is useful in cases where the encrypted PGP blurb is also digitally signed,
          allowing you to get your hands on the list of digitial signatures in order for you to verify
          each of them.
        </p><p>
          To decrypt the sample message above, you could use the following code snippet:
        </p><div id="IDGBQAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDGBQAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDGBQAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDGBQAB');return false;" title="Copy">Copy</a></div></div><div id="IDGBQAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">static</span> Stream Decrypt (MimeMessage message)
{
    <span class="highlight-keyword">var</span> text = message.TextBody;

    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> encrypted = <span class="highlight-keyword">new</span> MemoryStream (Encoding.ASCII.GetBytes (text), <span class="highlight-keyword">false</span>)) {
        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> ctx = <span class="highlight-keyword">new</span> MyGnuPGContext ()) {
            <span class="highlight-keyword">var</span> decrypted = <span class="highlight-keyword">new</span> MemoryStream ();

            ctx.DecryptTo (encrypted, decrypted);
            decrypted.Position = <span class="highlight-number">0</span>;

            <span class="highlight-keyword">return</span> decrypted;
        }
    }
}</pre></div></div></div></div><div class="collapsibleAreaRegion" id="Reply"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDRAB')" onkeypress="SectionExpandCollapse_CheckKey('IDRAB', event)" tabindex="0"><img id="IDRABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I reply to a message using MimeKit?</span></div><div id="IDRABSection" class="collapsibleSection"><p>
          Replying to a message is fairly simple. For the most part, you'd just create the reply message
          the same way you'd create any other message. There are only a few slight differences:
        </p><ol><li><p>
              In the reply message, you'll want to prefix the <span class="literal">Subject</span> header with
              <span class="literal">"Re: "</span> if the prefix doesn't already exist in the message you are
              replying to (in other words, if you are replying to a message with a <span class="literal">Subject</span>
              of <span class="literal">"Re: party tomorrow night!"</span>, you would not prefix it with another
              <span class="literal">"Re: "</span>).
            </p></li><li><p>
              You will want to set the reply message's <span class="literal">In-Reply-To</span> header to the value
              of the <span class="literal">Message-Id</span> header in the original message.
            </p></li><li><p>
              You will want to copy the original message's <span class="literal">References</span> header into the
              reply message's <span class="literal">References</span> header and then append the original message's
              <span class="literal">Message-Id</span> header.
            </p></li><li><p>
              You will probably want to "quote" the original message's text in the reply.
            </p></li></ol><p>
          If this logic were to be expressed in code, it might look something like this:
        </p><div id="IDDBRAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDDBRAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDDBRAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDDBRAB');return false;" title="Copy">Copy</a></div></div><div id="IDDBRAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> MimeMessage Reply (MimeMessage message, MailboxAddress <span class="highlight-keyword">from</span>, <span class="highlight-keyword">bool</span> replyToAll)
{
    <span class="highlight-keyword">var</span> reply = <span class="highlight-keyword">new</span> MimeMessage ();

    reply.From.Add (<span class="highlight-keyword">from</span>);

    <span class="highlight-comment">// reply to the sender of the message</span>
    <span class="highlight-keyword">if</span> (message.ReplyTo.Count &gt; <span class="highlight-number">0</span>) {
        reply.To.AddRange (message.ReplyTo);
    } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (message.From.Count &gt; <span class="highlight-number">0</span>) {
        reply.To.AddRange (message.From);
    } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (message.Sender != <span class="highlight-keyword">null</span>) {
        reply.To.Add (message.Sender);
    }

    <span class="highlight-keyword">if</span> (replyToAll) {
        <span class="highlight-comment">// include all of the other original recipients (removing ourselves from the list)</span>
        reply.To.AddRange (message.To.Mailboxes.Where (x =&gt; x.Address != <span class="highlight-keyword">from</span>.Address));
        reply.Cc.AddRange (message.Cc.Mailboxes.Where (x =&gt; x.Address != <span class="highlight-keyword">from</span>.Address));
    }

    <span class="highlight-comment">// set the reply subject</span>
    <span class="highlight-keyword">if</span> (!message.Subject.StartsWith (<span class="highlight-literal">"Re:"</span>, StringComparison.OrdinalIgnoreCase))
        reply.Subject = <span class="highlight-literal">"Re: "</span> + message.Subject;
    <span class="highlight-keyword">else</span>
        reply.Subject = message.Subject;

    <span class="highlight-comment">// construct the In-Reply-To and References headers</span>
    <span class="highlight-keyword">if</span> (!<span class="highlight-keyword">string</span>.IsNullOrEmpty (message.MessageId)) {
        reply.InReplyTo = message.MessageId;
        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> id <span class="highlight-keyword">in</span> message.References)
            reply.References.Add (id);
        reply.References.Add (message.MessageId);
    }

    <span class="highlight-comment">// quote the original message text</span>
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> quoted = <span class="highlight-keyword">new</span> StringWriter ()) {
        <span class="highlight-keyword">var</span> sender = message.Sender ?? message.From.Mailboxes.FirstOrDefault ();
        <span class="highlight-keyword">var</span> name = sender != <span class="highlight-keyword">null</span> ? (!<span class="highlight-keyword">string</span>.IsNullOrEmpty (sender.Name) ? sender.Name : sender.Address) : <span class="highlight-literal">"someone"</span>;

        quoted.WriteLine (<span class="highlight-literal">"On {0}, {1} wrote:"</span>, message.Date.ToString (<span class="highlight-literal">"f"</span>), name);
        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> reader = <span class="highlight-keyword">new</span> StringReader (message.TextBody)) {
            <span class="highlight-keyword">string</span> line;

            <span class="highlight-keyword">while</span> ((line = reader.ReadLine ()) != <span class="highlight-keyword">null</span>) {
                quoted.Write (<span class="highlight-literal">"&gt; "</span>);
                quoted.WriteLine (line);
            }
        }

        reply.Body = <span class="highlight-keyword">new</span> TextPart (<span class="highlight-literal">"plain"</span>) {
            Text = quoted.ToString ()
        };
    }

    <span class="highlight-keyword">return</span> reply;
}</pre></div></div></div><p>
          But what if you wanted to reply to a message and quote the HTML formatting of the original message
          body (assuming it has an HTML body) while still including the embedded images?
        </p><p>
          This gets a bit more complicated, but it's still doable...
        </p><p>
          The first thing we'd need to do is implement our own <a href="T_MimeKit_MimeVisitor.htm">MimeVisitor</a>
          to handle this:
        </p><div id="IDHBRAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDHBRAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDHBRAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDHBRAB');return false;" title="Copy">Copy</a></div></div><div id="IDHBRAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">class</span> ReplyVisitor : MimeVisitor
{
    <span class="highlight-keyword">readonly</span> Stack&lt;Multipart&gt; stack = <span class="highlight-keyword">new</span> Stack&lt;Multipart&gt; ();
    MimeMessage message;
    MimeEntity body;

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Creates a new ReplyVisitor.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-keyword">public</span> ReplyVisitor ()
    {
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Gets the reply.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;value&gt;The reply.&lt;/value&gt;</span>
    <span class="highlight-keyword">public</span> MimeEntity Body {
        <span class="highlight-keyword">get</span> { <span class="highlight-keyword">return</span> body; }
    }

    <span class="highlight-keyword">void</span> Push (MimeEntity entity)
    {
        <span class="highlight-keyword">var</span> multipart = entity <span class="highlight-keyword">as</span> Multipart;

        <span class="highlight-keyword">if</span> (body == <span class="highlight-keyword">null</span>) {
            body = entity;
        } <span class="highlight-keyword">else</span> {
            <span class="highlight-keyword">var</span> parent = stack.Peek ();
            parent.Add (entity);
        }

        <span class="highlight-keyword">if</span> (multipart != <span class="highlight-keyword">null</span>)
            stack.Push (multipart);
    }

    <span class="highlight-keyword">void</span> Pop ()
    {
        stack.Pop ();
    }

    <span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> <span class="highlight-keyword">string</span> GetOnDateSenderWrote (MimeMessage message)
    {
        <span class="highlight-keyword">var</span> sender = message.Sender != <span class="highlight-keyword">null</span> ? message.Sender : message.From.Mailboxes.FirstOrDefault ();
        <span class="highlight-keyword">var</span> name = sender != <span class="highlight-keyword">null</span> ? (!<span class="highlight-keyword">string</span>.IsNullOrEmpty (sender.Name) ? sender.Name : sender.Address) : <span class="highlight-literal">"someone"</span>;

        <span class="highlight-keyword">return</span> <span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"On {0}, {1} wrote:"</span>, message.Date.ToString (<span class="highlight-literal">"f"</span>), name);
    }

    <span class="highlight-comment">/// &lt;summary&gt;</span>
    <span class="highlight-comment">/// Visit the specified message.</span>
    <span class="highlight-comment">/// &lt;/summary&gt;</span>
    <span class="highlight-comment">/// &lt;param name="message"&gt;The message.&lt;/param&gt;</span>
    <span class="highlight-keyword">public</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> Visit (MimeMessage message)
    {
        <span class="highlight-keyword">this</span>.message = message;
        stack.Clear ();

        <span class="highlight-keyword">base</span>.Visit (message);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartAlternative (MultipartAlternative alternative)
    {
        <span class="highlight-keyword">var</span> multipart = <span class="highlight-keyword">new</span> MultipartAlternative ();

        Push (multipart);

        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; alternative.Count; i++)
            alternative[i].Accept (<span class="highlight-keyword">this</span>);

        Pop ();
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipartRelated (MultipartRelated related)
    {
        <span class="highlight-keyword">var</span> multipart = <span class="highlight-keyword">new</span> MultipartRelated ();
        <span class="highlight-keyword">var</span> root = related.Root;

        Push (multipart);

        root.Accept (<span class="highlight-keyword">this</span>);

        <span class="highlight-keyword">for</span> (<span class="highlight-keyword">int</span> i = <span class="highlight-number">0</span>; i &lt; related.Count; i++) {
            <span class="highlight-keyword">if</span> (related[i] != root)
                related[i].Accept (<span class="highlight-keyword">this</span>);
        }

        Pop ();
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMultipart (Multipart multipart)
    {
        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> part <span class="highlight-keyword">in</span> multipart) {
            <span class="highlight-keyword">if</span> (part <span class="highlight-keyword">is</span> MultipartAlternative)
                part.Accept (<span class="highlight-keyword">this</span>);
            <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (part <span class="highlight-keyword">is</span> MultipartRelated)
                part.Accept (<span class="highlight-keyword">this</span>);
            <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (part <span class="highlight-keyword">is</span> TextPart)
                part.Accept (<span class="highlight-keyword">this</span>);
        }
    }

    <span class="highlight-keyword">void</span> HtmlTagCallback (HtmlTagContext ctx, HtmlWriter htmlWriter)
    {
        <span class="highlight-keyword">if</span> (ctx.TagId == HtmlTagId.Body &amp;&amp; !ctx.IsEmptyElementTag) {
            <span class="highlight-keyword">if</span> (ctx.IsEndTag) {
                <span class="highlight-comment">// end our opening &lt;blockquote&gt;</span>
                htmlWriter.WriteEndTag (HtmlTagId.BlockQuote);

                <span class="highlight-comment">// pass the &lt;/body&gt; tag through to the output</span>
                ctx.WriteTag (htmlWriter, <span class="highlight-keyword">true</span>);
            } <span class="highlight-keyword">else</span> {
                <span class="highlight-comment">// pass the &lt;body&gt; tag through to the output</span>
                ctx.WriteTag (htmlWriter, <span class="highlight-keyword">true</span>);

                <span class="highlight-comment">// prepend the HTML reply with "On {DATE}, {SENDER} wrote:"</span>
                htmlWriter.WriteStartTag (HtmlTagId.P);
                htmlWriter.WriteText (GetOnDateSenderWrote (message));
                htmlWriter.WriteEndTag (HtmlTagId.P);

                <span class="highlight-comment">// Wrap the original content in a &lt;blockquote&gt;</span>
                htmlWriter.WriteStartTag (HtmlTagId.BlockQuote);
                htmlWriter.WriteAttribute (HtmlAttributeId.Style, <span class="highlight-literal">"border-left: 1px #ccc solid; margin: 0 0 0 .8ex; padding-left: 1ex;"</span>);

                ctx.InvokeCallbackForEndTag = <span class="highlight-keyword">true</span>;
            }
        } <span class="highlight-keyword">else</span> {
            <span class="highlight-comment">// pass the tag through to the output</span>
            ctx.WriteTag (htmlWriter, <span class="highlight-keyword">true</span>);
        }
    }

    <span class="highlight-keyword">string</span> QuoteText (<span class="highlight-keyword">string</span> text)
    {
        <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> quoted = <span class="highlight-keyword">new</span> StringWriter ()) {
            quoted.WriteLine (GetOnDateSenderWrote (message));

            <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> reader = <span class="highlight-keyword">new</span> StringReader (text)) {
                <span class="highlight-keyword">string</span> line;

                <span class="highlight-keyword">while</span> ((line = reader.ReadLine ()) != <span class="highlight-keyword">null</span>) {
                    quoted.Write (<span class="highlight-literal">"&gt; "</span>);
                    quoted.WriteLine (line);
                }
            }

            <span class="highlight-keyword">return</span> quoted.ToString ();
        }
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitTextPart (TextPart entity)
    {
        <span class="highlight-keyword">string</span> text;

        <span class="highlight-keyword">if</span> (entity.IsHtml) {
            <span class="highlight-keyword">var</span> converter = <span class="highlight-keyword">new</span> HtmlToHtml {
                HtmlTagCallback = HtmlTagCallback
            };

            text = converter.Convert (entity.Text);
        } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (entity.IsFlowed) {
            <span class="highlight-keyword">var</span> converter = <span class="highlight-keyword">new</span> FlowedToText ();

            text = converter.Convert (entity.Text);
            text = QuoteText (text);
        } <span class="highlight-keyword">else</span> {
            <span class="highlight-comment">// quote the original message text</span>
            text = QuoteText (entity.Text);
        }

        <span class="highlight-keyword">var</span> part = <span class="highlight-keyword">new</span> TextPart (entity.ContentType.MediaSubtype.ToLowerInvariant ()) {
            Text = text
        };

        Push (part);
    }

    <span class="highlight-keyword">protected</span> <span class="highlight-keyword">override</span> <span class="highlight-keyword">void</span> VisitMessagePart (MessagePart entity)
    {
        <span class="highlight-comment">// don't descend into message/rfc822 parts</span>
    }
}</pre></div></div></div><div id="IDIBRAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDIBRAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDIBRAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDIBRAB');return false;" title="Copy">Copy</a></div></div><div id="IDIBRAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> MimeMessage Reply (MimeMessage message, MailboxAddress <span class="highlight-keyword">from</span>, <span class="highlight-keyword">bool</span> replyToAll)
{
    <span class="highlight-keyword">var</span> visitor = <span class="highlight-keyword">new</span> ReplyVisitor ();
    <span class="highlight-keyword">var</span> reply = <span class="highlight-keyword">new</span> MimeMessage ();

    reply.From.Add (<span class="highlight-keyword">from</span>);

    <span class="highlight-comment">// reply to the sender of the message</span>
    <span class="highlight-keyword">if</span> (message.ReplyTo.Count &gt; <span class="highlight-number">0</span>) {
        reply.To.AddRange (message.ReplyTo);
    } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (message.From.Count &gt; <span class="highlight-number">0</span>) {
        reply.To.AddRange (message.From);
    } <span class="highlight-keyword">else</span> <span class="highlight-keyword">if</span> (message.Sender != <span class="highlight-keyword">null</span>) {
        reply.To.Add (message.Sender);
    }

    <span class="highlight-keyword">if</span> (replyToAll) {
        <span class="highlight-comment">// include all of the other original recipients (removing ourselves from the list)</span>
        reply.To.AddRange (message.To.Mailboxes.Where (x =&gt; x.Address != <span class="highlight-keyword">from</span>.Address));
        reply.Cc.AddRange (message.Cc.Mailboxes.Where (x =&gt; x.Address != <span class="highlight-keyword">from</span>.Address));
    }

    <span class="highlight-comment">// set the reply subject</span>
    <span class="highlight-keyword">if</span> (!message.Subject.StartsWith (<span class="highlight-literal">"Re:"</span>, StringComparison.OrdinalIgnoreCase))
        reply.Subject = <span class="highlight-literal">"Re: "</span> + message.Subject;
    <span class="highlight-keyword">else</span>
        reply.Subject = message.Subject;

    <span class="highlight-comment">// construct the In-Reply-To and References headers</span>
    <span class="highlight-keyword">if</span> (!<span class="highlight-keyword">string</span>.IsNullOrEmpty (message.MessageId)) {
        reply.InReplyTo = message.MessageId;
        <span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> id <span class="highlight-keyword">in</span> message.References)
            reply.References.Add (id);
        reply.References.Add (message.MessageId);
    }

    visitor.Visit (message);

    reply.Body = visitor.Body ?? <span class="highlight-keyword">new</span> TextPart (<span class="highlight-literal">"plain"</span>) { Text = ReplyVisitor.GetOnDateSenderWrote (message) + Environment.NewLine };

    <span class="highlight-keyword">return</span> reply;
}</pre></div></div></div></div><div class="collapsibleAreaRegion" id="Forward"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDSAB')" onkeypress="SectionExpandCollapse_CheckKey('IDSAB', event)" tabindex="0"><img id="IDSABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I forward a message?</span></div><div id="IDSABSection" class="collapsibleSection"><p>
          There are 2 common ways of forwarding a message: attaching the original message as an attachment and
          inlining the message body much like replying typically does. Which method you choose is up to you.
        </p><p>
          To forward a message by attaching it as an attachment, you would do do something like this:
        </p><div id="IDCBSAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDCBSAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDCBSAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDCBSAB');return false;" title="Copy">Copy</a></div></div><div id="IDCBSAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> MimeMessage Forward (MimeMessage original, MailboxAddress <span class="highlight-keyword">from</span>, IEnumerable&lt;InternetAddress&gt; to)
{
    <span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
    message.From.Add (<span class="highlight-keyword">from</span>);
    message.To.AddRange (to);

    <span class="highlight-comment">// set the forwarded subject</span>
    <span class="highlight-keyword">if</span> (!original.Subject?.StartsWith (<span class="highlight-literal">"FW:"</span>, StringComparison.OrdinalIgnoreCase))
        message.Subject = <span class="highlight-literal">"FW: "</span> + (original.Subject ?? <span class="highlight-keyword">string</span>.Empty);
    <span class="highlight-keyword">else</span>
        message.Subject = original.Subject;

    <span class="highlight-comment">// create the main textual body of the message</span>
    <span class="highlight-keyword">var</span> text = <span class="highlight-keyword">new</span> TextPart (<span class="highlight-literal">"plain"</span>) { Text = <span class="highlight-literal">"Here's the forwarded message:"</span> };

    <span class="highlight-comment">// create the message/rfc822 attachment for the original message</span>
    <span class="highlight-keyword">var</span> rfc822 = <span class="highlight-keyword">new</span> MessagePart { Message = original };

    <span class="highlight-comment">// create a multipart/mixed container for the text body and the forwarded message</span>
    <span class="highlight-keyword">var</span> multipart = <span class="highlight-keyword">new</span> Multipart (<span class="highlight-literal">"mixed"</span>);
    multipart.Add (text);
    multipart.Add (rfc822);

    <span class="highlight-comment">// set the multipart as the body of the message</span>
    message.Body = multipart;

    <span class="highlight-keyword">return</span> message;
}</pre></div></div></div><p>
          To forward a message by inlining the original message's text content, you can do something like this:
        </p><div id="IDEBSAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDEBSAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDEBSAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDEBSAB');return false;" title="Copy">Copy</a></div></div><div id="IDEBSAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">public</span> <span class="highlight-keyword">static</span> MimeMessage Forward (MimeMessage original, MailboxAddress <span class="highlight-keyword">from</span>, IEnumerable&lt;InternetAddress&gt; to)
{
    <span class="highlight-keyword">var</span> message = <span class="highlight-keyword">new</span> MimeMessage ();
    message.From.Add (<span class="highlight-keyword">from</span>);
    message.To.AddRange (to);

    <span class="highlight-comment">// set the forwarded subject</span>
    <span class="highlight-keyword">if</span> (!original.Subject?.StartsWith (<span class="highlight-literal">"FW:"</span>, StringComparison.OrdinalIgnoreCase))
        message.Subject = <span class="highlight-literal">"FW: "</span> + (original.Subject ?? <span class="highlight-keyword">string</span>.Empty);
    <span class="highlight-keyword">else</span>
        message.Subject = original.Subject;

    <span class="highlight-comment">// quote the original message text</span>
    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> text = <span class="highlight-keyword">new</span> StringWriter ()) {
        text.WriteLine ();
        text.WriteLine (<span class="highlight-literal">"-----Original Message-----"</span>);
        test.WriteLine (<span class="highlight-literal">"From: {0}"</span>, original.From);
        text.WriteLine (<span class="highlight-literal">"Sent: {0}"</span>, DateUtils.FormatDate (original.Date));
        text.WriteLine (<span class="highlight-literal">"To: {0}"</span>, original.To);
        text.WriteLine (<span class="highlight-literal">"Subject: {0}"</span>, original.Subject ?? <span class="highlight-keyword">string</span>.Empty);
        text.WriteLine ();

        text.Write (original.TextBody);

        message.Body = <span class="highlight-keyword">new</span> TextPart (<span class="highlight-literal">"plain"</span>) {
            Text = text.ToString ()
        };
    }

    <span class="highlight-keyword">return</span> message;
}</pre></div></div></div></div><div class="collapsibleAreaRegion" id="UnreadMessages"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDTAB')" onkeypress="SectionExpandCollapse_CheckKey('IDTAB', event)" tabindex="0"><img id="IDTABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How do I get all of the unread messages in a folder?</span></div><div id="IDTABSection" class="collapsibleSection"><p>
          The easiest way is to search for all of the messages that do not have the
          <span class="literal">\Seen</span> flag on them, like so:
        </p><div id="IDBBTAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDBBTAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDBBTAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDBBTAB');return false;" title="Copy">Copy</a></div></div><div id="IDBBTAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve"><span class="highlight-keyword">foreach</span> (<span class="highlight-keyword">var</span> uid <span class="highlight-keyword">in</span> folder.Search (SearchQuery.NotSeen)) {
    <span class="highlight-keyword">var</span> message = folder.GetMessage (uid);
}</pre></div></div></div></div><div class="collapsibleAreaRegion" id="ParseWebRequestFormData"><span class="collapsibleRegionTitle" onclick="SectionExpandCollapse('IDUAB')" onkeypress="SectionExpandCollapse_CheckKey('IDUAB', event)" tabindex="0"><img id="IDUABToggle" class="collapseToggle" src="../icons/SectionExpanded.png" />How would I parse multipart/form-data from an HTTP web request?</span></div><div id="IDUABSection" class="collapsibleSection"><p>
          Since classes like <a href="https://docs.microsoft.com/dotnet/api/system.net.httpwebrequest" target="_blank" rel="noopener noreferrer">HttpWebRequest</a>
          take care of parsing the HTTP headers (which includes the <span class="literal">Content-Type</span> header)
          and only offer a content stream to consume, MimeKit provides a way to deal with this using the
          following two static methods:
          <a href="M_MimeKit_MimeEntity_Load_1.htm">MimeEntity<span id="LSTDEDCC356_4" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Load(ParserOptions, ContentType, Stream, CancellationToken)</a>
          and
          <a href="M_MimeKit_MimeEntity_Load.htm">MimeEntity<span id="LSTDEDCC356_5" data-languageSpecificText="cs=.|vb=.|cpp=::|nu=.|fs=."></span>Load(ContentType, Stream, CancellationToken)</a></p><p>
          Here's how you might use these methods:
        </p><div id="IDCBUAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDCBUAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDCBUAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDCBUAB');return false;" title="Copy">Copy</a></div></div><div id="IDCBUAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">MimeEntity ParseMultipartFormData (HttpWebResponse response)
{
    <span class="highlight-keyword">var</span> contentType = ContentType.Parse (response.ContentType);

    <span class="highlight-keyword">return</span> MimeEntity.Load (contentType, response.GetResponseStream ());
}</pre></div></div></div><p>
          If the multipart/form-data HTTP response is expected to be large and you do
          not wish for the content to be read into memory, you can use the following
          approach:
        </p><div id="IDEBUAB" class="codeSnippetContainer"><div class="codeSnippetContainerTabs"><div id="IDEBUAB_tab1" class="codeSnippetContainerTabSingle">C#</div></div><div class="codeSnippetContainerCodeContainer"><div class="codeSnippetToolBar"><div class="codeSnippetToolBarText"><a id="IDEBUAB_copyCode" href="#" class="copyCodeSnippet" onclick="CopyToClipboard('IDEBUAB');return false;" title="Copy">Copy</a></div></div><div id="IDEBUAB_code_Div1" class="codeSnippetContainerCode" style="display: block"><pre xml:space="preserve">MimeEntity ParseMultipartFormData (HttpWebResponse response)
{
    <span class="highlight-comment">// create a temporary file to store our large HTTP data stream</span>
    <span class="highlight-keyword">var</span> tmp = Path.GetTempFileName ();

    <span class="highlight-keyword">using</span> (<span class="highlight-keyword">var</span> stream = File.Open (tmp, FileMode.Open, FileAccess.ReadWrite)) {
        <span class="highlight-comment">// create a header for the multipart/form-data MIME entity based on the Content-Type value of the HTTP</span>
        <span class="highlight-comment">// response</span>
        <span class="highlight-keyword">var</span> header = Encoding.UTF8.GetBytes (<span class="highlight-keyword">string</span>.Format (<span class="highlight-literal">"Content-Type: {0}\r\n\r\n"</span>, response.ContentType));

        <span class="highlight-comment">// write the header to the stream</span>
        stream.Write (header, <span class="highlight-number">0</span>, header.Length);

        <span class="highlight-comment">// copy the content of the HTTP response to our temporary stream</span>
        response.GetResponseStream ().CopyTo (stream);

        <span class="highlight-comment">// reset the stream back to the beginning</span>
        stream.Position = <span class="highlight-number">0</span>;

        <span class="highlight-comment">// parse the MIME entity with persistent = true, telling the parser not to load the content into memory</span>
        <span class="highlight-keyword">return</span> MimeEntity.Load (stream, persistent: <span class="highlight-keyword">true</span>);
    }
}</pre></div></div></div></div></div></div><div id="PageFooter" class="pageFooter"><!-- Global site tag (gtag.js) - Google Analytics -->
<script src="https://www.googletagmanager.com/gtag/js?id=UA-63841238-1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'UA-63841238-1');
</script><p><a href="https://github.com/jstedfast" target="_blank" rel="noopener noreferrer">Copyright © 2013-2023 Jeffrey Stedfast</a></p><div class="feedbackLink">Send comments on this topic to
        <a id="HT_MailLink" href="mailto:jestedfa%40microsoft.com?Subject=MailKit%20Documentation">Jeffrey Stedfast</a></div>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        HT_mailLink.href += ": " + document.title + "\u0026body=" + encodeURIComponent("Your feedback is used to improve the documentation and the product. Your e-mail address will not be used for any other purpose and is disposed of after the issue you report is resolved. While working to resolve the issue that you report, you may be contacted via e-mail to get further details or clarification on the feedback you sent. After the issue you report has been addressed, you may receive an e-mail to let you know that your feedback has been addressed.");
        </script></div></body></html>